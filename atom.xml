<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XieYang-blog</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://www.xieyangogo.cn/"/>
  <updated>2018-04-11T08:58:10.441Z</updated>
  <id>http://www.xieyangogo.cn/</id>
  
  <author>
    <name>Oceanxy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>sass基础入门</title>
    <link href="http://www.xieyangogo.cn/2018/04/10/sass%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    <id>http://www.xieyangogo.cn/2018/04/10/sass基础入门/</id>
    <published>2018-04-10T09:10:12.000Z</published>
    <updated>2018-04-11T08:58:10.441Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、-SASS"><a href="#一、-SASS" class="headerlink" title="一、 SASS"></a>一、 SASS</h1><p>sass 采用编程式的写法来编写样式表，最后编译成我们常见的css样式表。</p><h1 id="二、-安装"><a href="#二、-安装" class="headerlink" title="二、 安装"></a>二、 安装</h1><ul><li><p>SASS 由 Ruby 语言编写，但是不懂Ruby，不妨碍我们学习使用 SASS，因为两者之间没有关联性。<br>唯一的条件是必须在 Ruby 环境下运行 SASS。</p></li><li><p>SASS 是普通的文本文件，兼容 css 语法。</p></li><li><p>SASS 文件的后缀名为 .sass 或者 .scss。<strong>严重推荐使用 .scss 写法</strong></p></li></ul><a id="more"></a><p>.sass 语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">body</div><div class="line">  background: #eee</div><div class="line">  font-size: 12px</div><div class="line">p</div><div class="line">  background: #0982c1</div><div class="line">  span</div><div class="line">    color: red</div></pre></td></tr></table></figure><p>.scss 语法</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#eee</span>;</div><div class="line">  <span class="attribute">font-size</span>:<span class="number">12px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#0982c1</span>;</div><div class="line">  </div><div class="line">  <span class="selector-tag">span</span> &#123;</div><div class="line">    <span class="attribute">color</span>: red;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><a href="https://rubyinstaller.org/downloads/" target="_blank" rel="external">Ruby 下载</a></p><p><a href="https://www.sass.hk/" target="_blank" rel="external">sass中文网</a></p><p>安装 Ruby 之后，安装 SASS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem install sass</div></pre></td></tr></table></figure><h1 id="三、-命令"><a href="#三、-命令" class="headerlink" title="三、 命令"></a>三、 命令</h1><p>显示 test.scss 文件编译后的 css 代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sass test.scss</div></pre></td></tr></table></figure><p>将 test.scss 文件编译后的 css 代码保存到 test.css 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sass test.scss test.css</div></pre></td></tr></table></figure><p>或者写成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sass test.scss:test.css</div></pre></td></tr></table></figure><h2 id="1-编译风格"><a href="#1-编译风格" class="headerlink" title="1. 编译风格"></a>1. 编译风格</h2><ul><li><p>nested：嵌套缩进的css代码，默认</p></li><li><p>expanded：没有缩进的、扩展的css代码</p></li><li><p>compact：简洁格式的css代码</p></li><li><p>compressed：压缩后的css代码，一般用于生产环境</p></li></ul><h3 id="i-使用-nested-风格"><a href="#i-使用-nested-风格" class="headerlink" title="i. 使用 nested 风格"></a>i. 使用 nested 风格</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sass test.scss test.css --style nested</div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#eee</span>;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;&#125;</div><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#0982c1</span>;&#125; </div><div class="line"><span class="selector-tag">p</span> <span class="selector-tag">span</span> &#123;</div><div class="line">    <span class="attribute">color</span>: red;&#125;</div></pre></td></tr></table></figure><h3 id="ii-使用-expanded-风格"><a href="#ii-使用-expanded-风格" class="headerlink" title="ii. 使用 expanded 风格"></a>ii. 使用 expanded 风格</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sass test.scss test.css --style expanded</div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#eee</span>;</div><div class="line">    <span class="attribute">font-size</span>:<span class="number">12px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#0982c1</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">p</span> <span class="selector-tag">span</span> &#123;</div><div class="line">    <span class="attribute">color</span>: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="iii-使用-compact-风格"><a href="#iii-使用-compact-风格" class="headerlink" title="iii. 使用 compact 风格"></a>iii. 使用 compact 风格</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sass test.scss test.css --style compact</div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;<span class="attribute">background</span>: <span class="number">#eee</span>;<span class="attribute">font-size</span>:<span class="number">12px</span>;&#125;</div><div class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">background</span>: <span class="number">#0982c1</span>;&#125;</div><div class="line"><span class="selector-tag">p</span> <span class="selector-tag">span</span> &#123;<span class="attribute">color</span>: red;&#125;</div></pre></td></tr></table></figure><h3 id="iv-使用-compressed-风格"><a href="#iv-使用-compressed-风格" class="headerlink" title="iv. 使用 compressed 风格"></a>iv. 使用 compressed 风格</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sass test.scss test.css --style compressed</div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span>&#123;<span class="attribute">background</span>:<span class="number">#eee</span>;<span class="attribute">font-size</span>:<span class="number">12px</span>;&#125;<span class="selector-tag">p</span>&#123;<span class="attribute">background</span>:<span class="number">#0982c1</span>;&#125;<span class="selector-tag">p</span> <span class="selector-tag">span</span>&#123;<span class="attribute">color</span>:red;&#125;</div></pre></td></tr></table></figure><h2 id="2-监听某个文件或目录，一旦文件被修改，立即编译"><a href="#2-监听某个文件或目录，一旦文件被修改，立即编译" class="headerlink" title="2. 监听某个文件或目录，一旦文件被修改，立即编译"></a>2. 监听某个文件或目录，一旦文件被修改，立即编译</h2><p>监听一个文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sass --watch test.scss test.css</div></pre></td></tr></table></figure></p><p>监听一个目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sass --watch app/sass output/stylesheets</div></pre></td></tr></table></figure></p><h1 id="四、-基本写法"><a href="#四、-基本写法" class="headerlink" title="四、 基本写法"></a>四、 基本写法</h1><h2 id="1-File-Encoding"><a href="#1-File-Encoding" class="headerlink" title="1. File Encoding"></a>1. File Encoding</h2><p>如果 SASS 文件中存在中文等其他字符，一般是注释，请在文件第一行写上：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">charset</span> <span class="string">"utf-8"</span>;</div></pre></td></tr></table></figure><p><strong><a href="http://www.ruanyifeng.com/blog/2012/06/sass.html" target="_blank" rel="external">参考文档</a></strong></p><h2 id="2-变量"><a href="#2-变量" class="headerlink" title="2. 变量"></a>2. 变量</h2><p>所有变量以 $ 开头</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$width</span>: <span class="number">10px</span> !default; <span class="comment">// 默认变量</span></div><div class="line"><span class="variable">$height</span>: <span class="number">10px</span> !global; <span class="comment">// 全局变量</span></div></pre></td></tr></table></figure><h2 id="3-变量的作用域"><a href="#3-变量的作用域" class="headerlink" title="3. 变量的作用域"></a>3. 变量的作用域</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$color</span>: blue; <span class="comment">// 定义变量1</span></div><div class="line"><span class="selector-tag">nav</span> &#123;</div><div class="line">  <span class="selector-tag">span</span> &#123;</div><div class="line">    <span class="attribute">color</span>: <span class="variable">$color</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-tag">ul</span> &#123;</div><div class="line">    <span class="variable">$color</span>: red; <span class="comment">// 定义局部变量2，此处不会改变变量1（$color: blue）的值。</span></div><div class="line">    <span class="attribute">color</span>: <span class="variable">$color</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-tag">p</span> &#123;</div><div class="line">    <span class="attribute">color</span>: <span class="variable">$color</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>编译后<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">nav</span> <span class="selector-tag">span</span>&#123;</div><div class="line">  <span class="attribute">color</span>: blue;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span>&#123;</div><div class="line">  <span class="attribute">color</span>: red;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">nav</span> <span class="selector-tag">p</span>&#123;</div><div class="line">  <span class="attribute">color</span>: blue;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="4-选择器嵌套"><a href="#4-选择器嵌套" class="headerlink" title="4. 选择器嵌套"></a>4. 选择器嵌套</h2><blockquote><p>使用 &amp; 表示父级</p></blockquote><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#top_nav</span> &#123;</div><div class="line">  <span class="selector-tag">a</span> &#123;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">    </div><div class="line">    &amp;:hover &#123; <span class="comment">// 父级（a元素）的hover状态</span></div><div class="line">      <span class="attribute">color</span>: <span class="variable">$color</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>编译后<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#top_nav</span> <span class="selector-tag">a</span> &#123;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#top_nav</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#ddd</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="5-属性嵌套"><a href="#5-属性嵌套" class="headerlink" title="5. 属性嵌套"></a>5. 属性嵌套</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.wrap</span> &#123;</div><div class="line">  <span class="attribute">font</span>: &#123;</div><div class="line">    size: <span class="number">14px</span>;</div><div class="line">    weight: bold;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>编译后<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.wrap</span> &#123;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line">  <span class="attribute">font-weight</span>: bold;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="6-混合申明"><a href="#6-混合申明" class="headerlink" title="6. 混合申明"></a>6. 混合申明</h2><h3 id="i-无参数"><a href="#i-无参数" class="headerlink" title="i. 无参数"></a>i. 无参数</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">mixin</span> radius1 &#123;</div><div class="line">  -webkit-<span class="attribute">border-radius</span>: <span class="number">3px</span>;</div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.r1</span> &#123;</div><div class="line">  @<span class="keyword">include</span> radius1;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="ii-有参数（-变量-默认值-）"><a href="#ii-有参数（-变量-默认值-）" class="headerlink" title="ii. 有参数（ 变量[:默认值] ）"></a>ii. 有参数（ 变量[:默认值] ）</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">mixin</span> radius2(<span class="variable">$radius</span>: 3px) &#123;</div><div class="line">  -webkit-<span class="attribute">border-radius</span>: <span class="variable">$radius</span>;</div><div class="line">  <span class="attribute">border-radius</span>: <span class="variable">$radius</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.r2-1</span> &#123;</div><div class="line">  @<span class="keyword">include</span> radius2; <span class="comment">// 使用默认值</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.r2-2</span> &#123;</div><div class="line">  @<span class="keyword">include</span> radius2(<span class="number">20px</span>); <span class="comment">// 传递自定义参数</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="iii-多个参数"><a href="#iii-多个参数" class="headerlink" title="iii. 多个参数"></a>iii. 多个参数</h3><ul><li>声明一个混合boxSize，有两个参数高度和宽度</li><li>在.box中调用此混合并为赋值宽度100px，高度200px</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">mixin</span> boxSize(<span class="variable">$width</span>: 10px, <span class="variable">$height</span>: 100px) &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="variable">$width</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="variable">$height</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">  @<span class="keyword">include</span> boxSize(<span class="number">100px</span>, 200px);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 另一种写法 */</span></div><div class="line"><span class="selector-class">.box2</span> &#123;</div><div class="line">  @<span class="keyword">include</span> boxSize(<span class="variable">$width</span>: 100px, <span class="variable">$height</span>: 200px);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>编译后<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>,</div><div class="line"><span class="selector-class">.box2</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="iv-多组值参数"><a href="#iv-多组值参数" class="headerlink" title="iv. 多组值参数"></a>iv. 多组值参数</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">mixin</span> box-shadow(<span class="variable">$shadow</span>...) &#123;</div><div class="line">  -webkit-<span class="attribute">box-shadow</span>: <span class="variable">$shadow</span>;</div><div class="line">  <span class="attribute">box-shadow</span>: <span class="variable">$shadow</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.box-shadow</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="variable">$width</span> solid <span class="variable">$color</span>;</div><div class="line">  @<span class="keyword">include</span> box-shadow(<span class="number">0</span> 2px 2px red, 0 3px 3px blue, 0 4px 4px yellow);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="7-继承"><a href="#7-继承" class="headerlink" title="7. 继承"></a>7. 继承</h2><h3 id="i-简单继承"><a href="#i-简单继承" class="headerlink" title="i. 简单继承"></a>i. 简单继承</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">a</span> &#123;</div><div class="line">  <span class="attribute">color</span>: <span class="variable">$color</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">a</span>:hover &#123;</div><div class="line">  <span class="attribute">text-decoration</span>: underline;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.disabled</span> &#123;</div><div class="line">  <span class="attribute">color</span>: gray;</div><div class="line">  @<span class="keyword">extend</span> a; <span class="comment">// 继承a元素</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.hoverlink</span> &#123;</div><div class="line">  @<span class="keyword">extend</span> a:hover; <span class="comment">// 继承a元素的hover状态</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="ii-继承多个选择器"><a href="#ii-继承多个选择器" class="headerlink" title="ii. 继承多个选择器"></a>ii. 继承多个选择器</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.one</span> &#123;</div><div class="line">  @<span class="keyword">include</span> boxSize(<span class="number">100px</span>, 100px); <span class="comment">//使用混合</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.two</span> &#123;</div><div class="line">  @<span class="keyword">extend</span> .one;</div><div class="line">  @<span class="keyword">extend</span> .three;</div><div class="line">  <span class="attribute">background</span>: red;</div><div class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#000</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.three</span> &#123;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="8-选择器占位符"><a href="#8-选择器占位符" class="headerlink" title="8. 选择器占位符 %"></a>8. 选择器占位符 %</h2><p>没有被继承的选择器占位不会被编译成css</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">%bgd &#123;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">%mar &#123;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">5px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">%pad &#123;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">5px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.btn</span> &#123;</div><div class="line">  @<span class="keyword">extend</span> %mar;</div><div class="line">  @<span class="keyword">extend</span> %pad;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.block</span> &#123;</div><div class="line">  @<span class="keyword">extend</span> %mar;</div><div class="line">  <span class="selector-tag">span</span> &#123;</div><div class="line">    @<span class="keyword">extend</span> %pad;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>编译后 （此处没有编译scss中的占位选择器 %bgd ）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.btn</span>, <span class="selector-class">.block</span> &#123;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">5px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.btn</span>, <span class="selector-class">.block</span> <span class="selector-tag">span</span> &#123;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">5px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="五、-进阶"><a href="#五、-进阶" class="headerlink" title="五、 进阶"></a>五、 进阶</h1><h2 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1. 数据类型"></a>1. 数据类型</h2><p>SassScript 支持的6种数据类型</p><ul><li>数字（例如 1.2、13、10px）</li><li>文本字符串，无论是否有引号（例如 “foo”、’bar’、baz）</li><li>颜色（例如 blue、#04a3f9、rgba(255, 0, 0, 0.5)）</li><li>布尔值（例如 true、false）</li><li>空值（例如 null）</li><li>值列表，用空格或逗号分隔（例如 1.5em 1em 0 2em、 Helvetica, Arial, sans-serif）</li></ul><p>SassScript 还支持所有其他 CSS 属性值类型，例如 Unicode 范围和 !important 声明。然而，它不会对这些类型做特殊处理。 它们只会被当做不带引号的字符串看待。</p><h2 id="2-插值语句"><a href="#2-插值语句" class="headerlink" title="2. 插值语句 #{}"></a>2. 插值语句 #{}</h2><p>使用 #{} 插值语句 (interpolation) 时，有引号的字符串将被编译为无引号字符串<br>如果你希望在纯 CSS 中使用变量和斜杠（/）， 你可以用 #{} 包住变量。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">  <span class="variable">$font-size</span>: <span class="number">12px</span>;</div><div class="line">  <span class="variable">$line-height</span>: <span class="number">30px</span>;</div><div class="line">  <span class="attribute">font</span>: <span class="variable">$font-size</span>/<span class="variable">$line-height</span>;       <span class="comment">// =&gt; font: 0.4</span></div><div class="line">  <span class="attribute">font</span>: #&#123;<span class="variable">$font-size</span>&#125;/#&#123;<span class="variable">$line-height</span>&#125;; <span class="comment">// =&gt; font: 12px/30px</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>编译后<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">  <span class="attribute">font</span>: <span class="number">12px</span>/<span class="number">30px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在文本字符串中，#{} 形式的表达式可以被用来在字符串中添加动态值：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:before</span> &#123;</div><div class="line">  <span class="attribute">content</span>: <span class="string">"I ate #&#123;5 + 10&#125; pies!"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>编译后<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:before</span> &#123;</div><div class="line">  <span class="attribute">content</span>: <span class="string">"I ate 15 pies!"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="3-字符串运算："><a href="#3-字符串运算：" class="headerlink" title="3. 字符串运算："></a>3. 字符串运算：</h2><h3 id="i-“-”-可以用来连接字符"><a href="#i-“-”-可以用来连接字符" class="headerlink" title="i. “+” 可以用来连接字符"></a>i. “+” 可以用来连接字符</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">  <span class="attribute">cursor</span>: e + -resize;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>编译后<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">  <span class="attribute">cursor</span>: e-resize;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="ii-有引号和无引号的连接规则：遵循-“-”-左边字符串的规则"><a href="#ii-有引号和无引号的连接规则：遵循-“-”-左边字符串的规则" class="headerlink" title="ii. 有引号和无引号的连接规则：遵循 “+” 左边字符串的规则"></a>ii. 有引号和无引号的连接规则：遵循 “+” 左边字符串的规则</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span>:before &#123;</div><div class="line">  <span class="attribute">content</span>: <span class="string">"Foo "</span> + Bar;</div><div class="line">  <span class="attribute">font-family</span>: sans- + <span class="string">"serif"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>编译后<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:before</span> &#123;</div><div class="line">  <span class="attribute">content</span>: <span class="string">"Foo Bar"</span>;</div><div class="line">  <span class="attribute">font-family</span>: sans-serif;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="4-空值（null）会被视作空字符串"><a href="#4-空值（null）会被视作空字符串" class="headerlink" title="4. 空值（null）会被视作空字符串"></a>4. 空值（null）会被视作空字符串</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$value</span>: null;</div><div class="line"><span class="selector-tag">p</span>:before &#123;</div><div class="line">  <span class="attribute">content</span>: <span class="string">"I ate #&#123;$value&#125; pies!"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>编译后<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:before</span> &#123;</div><div class="line">  <span class="attribute">content</span>: <span class="string">"I ate  pies!"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="5-if-判断"><a href="#5-if-判断" class="headerlink" title="5. @if 判断"></a>5. @if 判断</h2><p>除非你的代码中有偏复杂的逻辑，否则没必要在日常开发的样式表中使用条件语句。<br>实际上，条件语句主要适用于库和框架。<br>无论何时，如果你感觉需要它们，请遵守下述准则：</p><ul><li>除非必要，不然不需要括号；</li><li>务必在 @if 之前添加空行；</li><li>务必在左开大括号( { )后换行；</li><li>@else 语句和它前面的右闭大括号( } )写在同一行；</li><li>务必在右闭大括号( } )后添加空行；</li><li>除非下一行还是右闭大括号( } )，那么就在最后一个右闭大括号( } )后添加空行。</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">  @<span class="keyword">if</span> 1 + 1 == 2 &#123;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid;</div><div class="line">  &#125;</div><div class="line">  @<span class="keyword">if</span> 5 &lt; 3 &#123;</div><div class="line">    <span class="attribute">border</span>: <span class="number">2px</span> dotted;</div><div class="line">  &#125;</div><div class="line">  @<span class="keyword">if</span> null &#123;</div><div class="line">    <span class="attribute">border</span>: <span class="number">3px</span> double;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>编译后<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>@if @else 结合使用方法</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">  @<span class="keyword">if</span> 1 + 1 == 2 &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">30px</span>;</div><div class="line">  &#125; @<span class="keyword">else</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>编译后<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">30px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="6-三目运算符"><a href="#6-三目运算符" class="headerlink" title="6. 三目运算符"></a>6. 三目运算符</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">if(<span class="variable">$condition</span>, <span class="variable">$condition_true</span>, <span class="variable">$condition_false</span>)</div></pre></td></tr></table></figure><p>三个参数分别表示：条件，条件为真的值，条件为假的值。</p><p><strong>PS：这个 if 没有 @ 前缀，和 @if 判断不同</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$fontBold</span>: true;</div><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">  <span class="attribute">font-weight</span>: if(<span class="variable">$fontBold</span>, bold, normal);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>编译后<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">  <span class="attribute">font-weight</span>: bold;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="7-for-循环"><a href="#7-for-循环" class="headerlink" title="7. for 循环"></a>7. for 循环</h2><p>使用 @for 指令</p><p>@for 循环有两种方式：<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">for</span> <span class="variable">$i</span> from start through end &#123;&#125;</div></pre></td></tr></table></figure></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">for</span> <span class="variable">$i</span> from start to end &#123;&#125;</div></pre></td></tr></table></figure><p>$i: 表示变量</p><p>start: 表示起始值</p><p>end: 表示结束值</p><p><strong>区别：through 表示包括 end 这个数，而 to 则不包括 end 这个数</strong></p><h3 id="i-through"><a href="#i-through" class="headerlink" title="i. through"></a>i. through</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">for</span> <span class="variable">$i</span> from 1 through 3 &#123;</div><div class="line">  <span class="selector-class">.item-</span>#&#123;<span class="variable">$i</span>&#125; &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">2em</span> * <span class="variable">$i</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>编译后<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.item-1</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">2em</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.item-2</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">4em</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.item-3</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">6em</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="ii-to"><a href="#ii-to" class="headerlink" title="ii. to"></a>ii. to</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">for</span> <span class="variable">$i</span> from 10 to 30 &#123;</div><div class="line">  <span class="selector-class">.item-</span>#&#123;<span class="variable">$i</span>&#125; &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">2em</span> * <span class="variable">$i</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>编译后<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.item-1</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">2em</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.item-2</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">4em</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="8-each-循环"><a href="#8-each-循环" class="headerlink" title="8. each 循环"></a>8. each 循环</h2><p>each 循环就是去遍历一个列表，然后从列表中取出对应的值。</p><p>使用 @each 指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@each $var in &lt;list&gt;</div></pre></td></tr></table></figure><p>$var: 变量名<br>&lt; list &gt;: SassScript 的数据类型–值列表，它将返回一个列表值。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">each</span> <span class="variable">$animal</span> in puma, egret, salamander &#123;</div><div class="line">  .#&#123;<span class="variable">$animal</span>&#125;-<span class="attribute">icon</span> &#123;</div><div class="line">    <span class="attribute">background-image</span>: url(<span class="string">'/course/img/#&#123;$animal&#125;.png'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>编译后<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.puma-icon</span> &#123;</div><div class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'/course/img/puma.png'</span>);</div><div class="line">&#125;``</div><div class="line"><span class="selector-class">.egret-icon</span> &#123;</div><div class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'/course/img/egret.png'</span>);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.salamander-icon</span> &#123;</div><div class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'/course/img/salamander.png'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="9-while循环"><a href="#9-while循环" class="headerlink" title="9. while循环"></a>9. while循环</h2><p>使用 @while 指令</p><p>@while 指令需要 SassScript 表达式，并且会生成不同的样式块。</p><p>直到表达式的值为 false 时停止循环，这个和 for 循环很相似，只要 @while 后面的表达式的值为 true 就会执行。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$i</span>: <span class="number">6</span>;</div><div class="line">@<span class="keyword">while</span> <span class="variable">$i</span> &gt; 0 &#123;</div><div class="line">  <span class="selector-class">.item-</span>#&#123;<span class="variable">$i</span>&#125; &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">2em</span> * <span class="variable">$i</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="variable">$i</span>: <span class="variable">$i</span> - <span class="number">2</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>编译后<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.item-6</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">12em</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.item-4</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">8em</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.item-2</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">4em</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>///////////////////////////////////////////////////////////////////////////////////////////////////////////</p><p>////////////////////////////////////////// 我是华丽的分割线 ///////////////////////////////////</p><p>///////////////////////////////////////////////////////////////////////////////////////////////////////////</p><hr><p><strong>PS： 想开启开挂模式，请继续往下读</strong></p><h1 id="六、-函数"><a href="#六、-函数" class="headerlink" title="六、 函数"></a>六、 函数</h1><h2 id="1-颜色函数"><a href="#1-颜色函数" class="headerlink" title="1. 颜色函数"></a>1. 颜色函数</h2><ul><li><p>rgb($red,$green,$blue)：根据红、绿、蓝三个值创建一个颜色；</p></li><li><p>rgba($red,$green,$blue,$alpha)：根据红、绿、蓝和透明度值创建一个颜色；</p></li><li><p>red($color)：从一个颜色中获取其中红色值；</p></li><li><p>green($color)：从一个颜色中获取其中绿色值；</p></li><li><p>blue($color)：从一个颜色中获取其中蓝色值；</p></li><li><p>mix($color-1,$color-2,[$weight])：把两种颜色混合在一起。</p></li></ul><p><strong>测试：在终端中开启 SASS 的颜色计算</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sass -i</div></pre></td></tr></table></figure><p>根据 r:200, g:40, b:88 计算出一个十六进制颜色值: #c82858<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rgb(200,40,88)</div></pre></td></tr></table></figure></p><p>根据 #c82858 的 65% 透明度计算出一个 rgba 颜色值: rgba(200, 40, 88, 0.65)<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rgba(<span class="selector-id">#c82858</span>,<span class="selector-class">.65</span>)</div></pre></td></tr></table></figure></p><p>从 #c82858 颜色值中得到红色值200 200<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">red(<span class="selector-id">#c82858</span>)</div></pre></td></tr></table></figure></p><p>从 #c82858 颜色值中得到绿色值40 40<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">green(<span class="selector-id">#c82858</span>)</div></pre></td></tr></table></figure></p><p>从 #c82858 颜色值中得到蓝色值88 88<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">blue(<span class="selector-id">#c82858</span>)</div></pre></td></tr></table></figure></p><p>把 #c82858 和 rgba(200, 40, 88, .65) 两颜色按比例混合得到一个新颜色 rgba(200, 40, 80, 0.65105)<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mix(<span class="selector-id">#c82858</span>, rgba(200,40,80,<span class="selector-class">.65</span>), <span class="selector-class">.3</span>)</div></pre></td></tr></table></figure></p><h2 id="2-列表函数"><a href="#2-列表函数" class="headerlink" title="2. 列表函数"></a>2. 列表函数</h2><ul><li><p>length($list)：返回一个列表的长度值；</p><blockquote><p>PS: length()函数中的列表参数之间使用空格隔开，不能使用逗号，否则函数将会出错</p></blockquote></li><li><p>nth($list, $n)：返回一个列表中指定的某个标签值</p></li><li><p>join($list1, $list2, [$separator])：将两个列给连接在一起，变成一个列表；</p></li><li><p>append($list1, $val, [$separator])：将某个值放在列表的最后；</p></li><li><p>zip($lists…)：将几个列表结合成一个多维的列表；</p></li><li><p>index($list, $value)：返回一个值在列表中的位置值。</p></li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">length(10px) <span class="comment">// 1</span></div><div class="line">length(10px 20px (<span class="attribute">border</span> 1px solid) 2em) <span class="comment">// 4</span></div><div class="line">length(<span class="attribute">border</span> 1px solid) <span class="comment">// 3</span></div><div class="line">length(10px,20px,(<span class="attribute">border</span> 1px solid),2em) <span class="comment">// SyntaxError: wrong number of arguments (4 for 1) for `length'</span></div><div class="line"></div><div class="line">index(1px solid red, 1px) <span class="comment">// 1</span></div><div class="line">index(1px solid red, solid) <span class="comment">// 2</span></div><div class="line">index(1px solid red, red) <span class="comment">// 3</span></div><div class="line"></div><div class="line"><span class="comment">// 1px "solid" #008000, 2px "dashed" #0000ff, 3px "dotted" #ff0000</span></div><div class="line">zip(1px 2px 3px, solid dashed dotted, green blue red)</div></pre></td></tr></table></figure><h2 id="3-更多函数请查阅文档"><a href="#3-更多函数请查阅文档" class="headerlink" title="3. 更多函数请查阅文档"></a>3. 更多函数请<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html" target="_blank" rel="external">查阅文档</a></h2><p><strong>其实 SASS 函数在一般的项目中基本用不上，除了写写插件装装B，能用上的场合是…… 思来想去，也没想出来那里用最合适！！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、-SASS&quot;&gt;&lt;a href=&quot;#一、-SASS&quot; class=&quot;headerlink&quot; title=&quot;一、 SASS&quot;&gt;&lt;/a&gt;一、 SASS&lt;/h1&gt;&lt;p&gt;sass 采用编程式的写法来编写样式表，最后编译成我们常见的css样式表。&lt;/p&gt;
&lt;h1 id=&quot;二、-安装&quot;&gt;&lt;a href=&quot;#二、-安装&quot; class=&quot;headerlink&quot; title=&quot;二、 安装&quot;&gt;&lt;/a&gt;二、 安装&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;SASS 由 Ruby 语言编写，但是不懂Ruby，不妨碍我们学习使用 SASS，因为两者之间没有关联性。&lt;br&gt;唯一的条件是必须在 Ruby 环境下运行 SASS。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SASS 是普通的文本文件，兼容 css 语法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SASS 文件的后缀名为 .sass 或者 .scss。&lt;strong&gt;严重推荐使用 .scss 写法&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="css" scheme="http://www.xieyangogo.cn/categories/css/"/>
    
    
      <category term="css" scheme="http://www.xieyangogo.cn/tags/css/"/>
    
      <category term="sass" scheme="http://www.xieyangogo.cn/tags/sass/"/>
    
      <category term="css预处理器" scheme="http://www.xieyangogo.cn/tags/css%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>hexo 文章管理</title>
    <link href="http://www.xieyangogo.cn/2017/09/28/%E6%96%87%E7%AB%A0%E7%AE%A1%E7%90%86/"/>
    <id>http://www.xieyangogo.cn/2017/09/28/文章管理/</id>
    <published>2017-09-28T06:25:34.000Z</published>
    <updated>2018-04-11T08:49:57.708Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前提：已经使用 npm 预装好了 <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a> 所需的各种依赖包。<br>查阅 <a href="https://hexo.io/docs/" target="_blank" rel="external">文档</a> 以获取更多信息。如果在使用Hexo时遇到任何问题，您可以在 <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> 中找到答案，或者您可以在 <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a> 上询问。</p></blockquote><h2 id="一、-流程"><a href="#一、-流程" class="headerlink" title="一、 流程"></a>一、 流程</h2><h3 id="1-全局安装-hexo-命令库"><a href="#1-全局安装-hexo-命令库" class="headerlink" title="1. 全局安装 hexo 命令库"></a>1. 全局安装 hexo 命令库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-cli -g</div></pre></td></tr></table></figure><a id="more"></a><h3 id="2-创建一个博客项目（一般只在首次创建，后续操作从第三步开始即可）"><a href="#2-创建一个博客项目（一般只在首次创建，后续操作从第三步开始即可）" class="headerlink" title="2. 创建一个博客项目（一般只在首次创建，后续操作从第三步开始即可）"></a>2. 创建一个博客项目（一般只在首次创建，后续操作从第三步开始即可）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init blog</div></pre></td></tr></table></figure><h3 id="3-进入博客项目"><a href="#3-进入博客项目" class="headerlink" title="3. 进入博客项目"></a>3. 进入博客项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd blog</div></pre></td></tr></table></figure><h3 id="4-新建-amp-编辑文章"><a href="#4-新建-amp-编辑文章" class="headerlink" title="4. 新建&amp;编辑文章"></a>4. 新建&amp;编辑文章</h3><p>命令行中输入以下指令以创建新文章：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new &quot;new article&quot;</div></pre></td></tr></table></figure><blockquote><p>详细信息: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p></blockquote><p>执行后在 source/_posts 中生成了一个 new-article.md 文件</p><p>文件中的初始内容为：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">title:</span> <span class="string">new</span> <span class="string">article</span></div><div class="line"><span class="attr">date:</span> <span class="number">2014</span><span class="bullet">-11</span><span class="bullet">-01</span> <span class="number">20</span><span class="string">:10:33</span></div><div class="line"><span class="attr">tags:</span></div><div class="line"><span class="meta">---</span></div></pre></td></tr></table></figure></p><p>使用三个 “-” 字符包裹着页面的属性，采用 yaml 格式书写</p><p>接着是正文，采用 <a href="http://wowubuntu.com/markdown/index.html" target="_blank" rel="external">markdown</a> 格式书写</p><blockquote><p>注意：如果使用了第三方服务，如 algolia 搜索服务，在新建了页面后，记得在根目录执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo algolia/a</div></pre></td></tr></table></figure></p><p>以更新搜索内容</p></blockquote><h3 id="5-生成静态文件"><a href="#5-生成静态文件" class="headerlink" title="5. 生成静态文件"></a>5. 生成静态文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo generate/g</div></pre></td></tr></table></figure><blockquote><p>详细信息: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p></blockquote><h3 id="6-本地服务预览"><a href="#6-本地服务预览" class="headerlink" title="6. 本地服务预览"></a>6. 本地服务预览</h3><p>命令行中输入以下指令启动本地服务器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server/s</div></pre></td></tr></table></figure></p><blockquote><p>详细信息: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p></blockquote><p>然后在浏览器窗口打开 localhost:4000</p><blockquote><p>注意：在新建、删除或修改文章之后，不需要重新启动服务器，只需刷新一下页面就能预览新的改动</p></blockquote><h3 id="7-发布到服务器上"><a href="#7-发布到服务器上" class="headerlink" title="7. 发布到服务器上"></a>7. 发布到服务器上</h3><p>命令行中输入以下指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo deploy/d</div></pre></td></tr></table></figure><blockquote><p>详细信息: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p><p>前提:必须在站点配置文件 _config.yml 中做以下配置：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">deploy:</span></div><div class="line"><span class="attr">  type:</span> <span class="string">git</span></div><div class="line"><span class="attr">  repository:</span> <span class="string">git@github.com:用户名/仓库名.git</span></div><div class="line"><span class="attr">  branch:</span> <span class="string">master</span></div></pre></td></tr></table></figure></p><p>这里只会把根目录中的 public 整个文件夹发布到服务器，因为这里面才是所有工作的产出物——我们的博客静态文件。我们之前所有操作都是在为这个产出做准备工作。</p></blockquote><h2 id="二、-属性"><a href="#二、-属性" class="headerlink" title="二、 属性"></a>二、 属性</h2><p>文章可以拥有如下属性：</p><table><thead><tr><th>Setting</th><th>Description</th><th>Default</th></tr></thead><tbody><tr><td>layout</td><td>Layout</td><td>post或page</td></tr><tr><td>title</td><td>文章的标题</td><td></td></tr><tr><td>date</td><td>文章的创建日期</td><td>文章的创建日期</td></tr><tr><td>updated</td><td>文章的更新日期</td><td>文章的更新日期</td></tr><tr><td>comments</td><td>是否开启评论</td><td>true</td></tr><tr><td>tags</td><td>标签</td><td></td></tr><tr><td>categories</td><td>分类</td><td></td></tr><tr><td>permalink</td><td>url中的名字</td><td>文件名</td></tr></tbody></table><h2 id="三、-分类和标签的写法"><a href="#三、-分类和标签的写法" class="headerlink" title="三、 分类和标签的写法"></a>三、 分类和标签的写法</h2><p>在正文之前的配置项中配置相应的文本即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="attr">categories:</span></div><div class="line"><span class="bullet">  -</span> <span class="string">日记</span></div><div class="line"><span class="attr">tags:</span></div><div class="line"><span class="bullet">  -</span> <span class="string">Hexo</span></div><div class="line"><span class="bullet">  -</span> <span class="string">node.js</span></div><div class="line">  </div><div class="line"><span class="comment"># 或者写成数组的形式</span></div><div class="line"><span class="attr">categories:</span> <span class="string">日记</span></div><div class="line"><span class="attr">tags:</span> <span class="string">[Hexo,</span> <span class="string">node.js]</span></div></pre></td></tr></table></figure><h2 id="四、-首页摘要"><a href="#四、-首页摘要" class="headerlink" title="四、 首页摘要"></a>四、 首页摘要</h2><p>同 wordpress 一样，在正文中 <!--more--> 之上的内容显示为摘要。</p><h2 id="五、-layout"><a href="#五、-layout" class="headerlink" title="五、 layout"></a>五、 layout</h2><p>如果你修改了 layout，在 scaffolds 文件夹里一定要有名字对应的模版文件，否则会采用默认模版。</p><h2 id="六、-文件名"><a href="#六、-文件名" class="headerlink" title="六、 文件名"></a>六、 文件名</h2><p>在配置文件中的 new_post_name 项可以设置文件名，默认为 :title，也就是你在命令行输入的名字。<br>文件名可以为下面几个变量和字符串常量的任意组合：</p><table><thead><tr><th>Variable</th><th>Description</th></tr></thead><tbody><tr><td>:title</td><td>Escaped title (lower case and replace spaces with dash)</td></tr><tr><td>:year</td><td>Created year (4-digit)</td></tr><tr><td>:month</td><td>Created month (2-digit)</td></tr><tr><td>:i_month</td><td>Created month (Without leading zeros)</td></tr><tr><td>:day</td><td>Created day (2-digit)</td></tr><tr><td>:i_day</td><td>Created day (Without leading zeros)</td></tr></tbody></table><h2 id="七、-草稿"><a href="#七、-草稿" class="headerlink" title="七、 草稿"></a>七、 草稿</h2><p>草稿相当于很多博客都有的 “私密文章” 功能。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new draft &quot;new draft&quot;</div></pre></td></tr></table></figure></p><p>会在 source/_drafts 目录下生成一个 new-draft.md 文件。但是这个文件不被显示在页面上，链接也访问不到。也就是说如果你想把某一篇文章移除显示，又不舍得删除，可以把它移动到 _drafts 目录之中。</p><p>如果你希望强行预览草稿，更改配置文件：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">render_drafts:</span> <span class="literal">true</span></div></pre></td></tr></table></figure></p><p>或者，如下方式启动server：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server --drafts</div></pre></td></tr></table></figure></p><p>下面这条命令可以把草稿变成文章，或者页面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo publish [layout] &lt;filename&gt;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前提：已经使用 npm 预装好了 &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt; 所需的各种依赖包。&lt;br&gt;查阅 &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文档&lt;/a&gt; 以获取更多信息。如果在使用Hexo时遇到任何问题，您可以在 &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; 中找到答案，或者您可以在 &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt; 上询问。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、-流程&quot;&gt;&lt;a href=&quot;#一、-流程&quot; class=&quot;headerlink&quot; title=&quot;一、 流程&quot;&gt;&lt;/a&gt;一、 流程&lt;/h2&gt;&lt;h3 id=&quot;1-全局安装-hexo-命令库&quot;&gt;&lt;a href=&quot;#1-全局安装-hexo-命令库&quot; class=&quot;headerlink&quot; title=&quot;1. 全局安装 hexo 命令库&quot;&gt;&lt;/a&gt;1. 全局安装 hexo 命令库&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install hexo-cli -g&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://www.xieyangogo.cn/categories/hexo/"/>
    
    
      <category term="前端" scheme="http://www.xieyangogo.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="hexo" scheme="http://www.xieyangogo.cn/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>D3学习笔记</title>
    <link href="http://www.xieyangogo.cn/2017/07/18/D3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.xieyangogo.cn/2017/07/18/D3学习笔记/</id>
    <published>2017-07-18T03:01:00.000Z</published>
    <updated>2017-10-20T02:38:55.556Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/blog/pdf/D3%20学习笔记.pdf" target="_blank">在新标签页面打开</a></p><embed id="pdfPlayer" src="/blog/pdf/D3%20学习笔记.pdf" type="application/pdf" width="100%"><script type="text/javascript">    document.getElementById('pdfPlayer').style.height = window.innerHeight + 'px'</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;/blog/pdf/D3%20学习笔记.pdf&quot; target=&quot;_blank&quot;&gt;在新标签页面打开&lt;/a&gt;&lt;/p&gt;
&lt;embed id=&quot;pdfPlayer&quot; src=&quot;/blog/pdf/D3%20学习笔记.pdf&quot; type=&quot;application/
      
    
    </summary>
    
      <category term="D3" scheme="http://www.xieyangogo.cn/categories/D3/"/>
    
    
      <category term="d3" scheme="http://www.xieyangogo.cn/tags/d3/"/>
    
      <category term="学习笔记" scheme="http://www.xieyangogo.cn/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>javaScript动画基础</title>
    <link href="http://www.xieyangogo.cn/2014/12/27/javaScript%E5%8A%A8%E7%94%BB%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.xieyangogo.cn/2014/12/27/javaScript动画基础/</id>
    <published>2014-12-27T07:03:00.000Z</published>
    <updated>2017-10-20T02:38:55.556Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>为了做好导航菜单，有时候需要在菜单下拉的时候实现动画效果，本文记录实现动画核心要用到两个函数，setTimeout 与 setInterval</p></blockquote><h3 id="过程和原理"><a href="#过程和原理" class="headerlink" title="过程和原理"></a>过程和原理</h3><h4 id="实现一个匿名函数并能自己执行"><a href="#实现一个匿名函数并能自己执行" class="headerlink" title="实现一个匿名函数并能自己执行"></a>实现一个匿名函数并能自己执行</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// some code</span></div><div class="line">&#125;) ()</div></pre></td></tr></table></figure><p>提到闭包，自动执行的效果，在函数后加一对 “()” 表示自动执行，前边的匿名函数需要用 “()” 包起来，这样才能为宿主（我们的BOM环境）理解，里面的 function(){} 这就是个匿名函数。</p><h4 id="实现动画"><a href="#实现动画" class="headerlink" title="实现动画"></a>实现动画</h4><p>以改变一个box的透明度</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"animation"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>要实现 animation 的透明渐变，需要不断改变其透明度 opacity</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">    setTimeout((<span class="function"><span class="keyword">function</span> (<span class="params">pos</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            someAnimation(pos);</div><div class="line">        &#125;</div><div class="line">    &#125;)(i / <span class="number">10</span>), i * <span class="number">100</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这段代码有一定的难度，首先解释一下 setTimeout 在此处的用法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">setTimeout((<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// some code</span></div><div class="line">&#125;)(i / <span class="number">10</span>), i * <span class="number">100</span>)</div></pre></td></tr></table></figure><p>setTimeout 第一个参数为要执行的函数，第二个参数为时间参数，意为多久后开始执行，因 javascript 没有块的概念，作用域范围是以函数为准的，所以我们这里使用的闭包，实现原理如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;)()</div></pre></td></tr></table></figure><p>在这里面执行for循环，达到我们想要的结果，如果我们不使用闭包，代码会如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params">pos</span>) </span>&#123;</div><div class="line">        someAnimation(pos);</div><div class="line">    &#125;(i / <span class="number">10</span>), i * <span class="number">100</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这样的for循环只会执行一次，即 i = 9 时。到目前为止的完整代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">someAnimation</span>(<span class="params">args</span>) </span>&#123;</div><div class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"animation"</span>).style.opacity = args;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">        setTimeout((<span class="function"><span class="keyword">function</span> (<span class="params">pos</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                someAnimation(pos);</div><div class="line">            &#125;</div><div class="line">        &#125;)(i / <span class="number">10</span>), i * <span class="number">100</span>)</div><div class="line">    &#125;</div><div class="line">&#125;)()</div></pre></td></tr></table></figure><p>这样实现了 id 为 animation 的 box 透明度从 0 到 1 的一次变化</p><h4 id="使用-setInterval-实现不间断变化"><a href="#使用-setInterval-实现不间断变化" class="headerlink" title="使用 setInterval 实现不间断变化"></a>使用 setInterval 实现不间断变化</h4><p>setInterval 有两个参数，第一个是要执行的函数，第二个是执行间隔时间</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">someAnimation</span>(<span class="params">args</span>) </span>&#123;</div><div class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"animation"</span>).style.opacity = args;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">            setTimeout((<span class="function"><span class="keyword">function</span> (<span class="params">pos</span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                    someAnimation(pos);</div><div class="line">                &#125;</div><div class="line">            &#125;)(i / <span class="number">10</span>), i * <span class="number">100</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;, <span class="number">2000</span>);</div><div class="line">&#125;)()</div></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"</span></div><div class="line"><span class="meta">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xml:lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=UTF-8"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">            #animation &#123;</span></div><div class="line"><span class="undefined">                width: 500px;</span></div><div class="line"><span class="undefined">                height: 350px;</span></div><div class="line"><span class="undefined">                background-color: red;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"animation"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">            (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">                <span class="function"><span class="keyword">function</span> <span class="title">someAnimation</span>(<span class="params">args</span>) </span>&#123;</span></div><div class="line"><span class="javascript">                    <span class="built_in">document</span>.getElementById(<span class="string">"animation"</span>).style.opacity = args;</span></div><div class="line"><span class="undefined">                &#125;</span></div><div class="line"><span class="undefined">        </span></div><div class="line"><span class="javascript">                setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">                    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span></div><div class="line"><span class="javascript">                        setTimeout((<span class="function"><span class="keyword">function</span> (<span class="params">pos</span>) </span>&#123;</span></div><div class="line"><span class="javascript">                            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="undefined">                                someAnimation(pos);</span></div><div class="line"><span class="undefined">                            &#125;</span></div><div class="line"><span class="undefined">                        &#125;)(i / 10), i * 100)</span></div><div class="line"><span class="undefined">                    &#125;</span></div><div class="line"><span class="undefined">                &#125;, 2000);</span></div><div class="line"><span class="undefined">            &#125;)()</span></div><div class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;为了做好导航菜单，有时候需要在菜单下拉的时候实现动画效果，本文记录实现动画核心要用到两个函数，setTimeout 与 setInterval&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;过程和原理&quot;&gt;&lt;a href=&quot;#过程和原理&quot; cl
      
    
    </summary>
    
      <category term="javascript" scheme="http://www.xieyangogo.cn/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://www.xieyangogo.cn/tags/javascript/"/>
    
      <category term="动画" scheme="http://www.xieyangogo.cn/tags/%E5%8A%A8%E7%94%BB/"/>
    
      <category term="setTimeout" scheme="http://www.xieyangogo.cn/tags/setTimeout/"/>
    
      <category term="setInterval" scheme="http://www.xieyangogo.cn/tags/setInterval/"/>
    
  </entry>
  
  <entry>
    <title>javascript难点剖析二：closure（闭包）</title>
    <link href="http://www.xieyangogo.cn/2014/12/23/javascript%E9%9A%BE%E7%82%B9%E5%89%96%E6%9E%90%E4%BA%8C%EF%BC%9Aclosure%EF%BC%88%E9%97%AD%E5%8C%85%EF%BC%89/"/>
    <id>http://www.xieyangogo.cn/2014/12/23/javascript难点剖析二：closure（闭包）/</id>
    <published>2014-12-23T07:52:00.000Z</published>
    <updated>2017-10-20T02:38:55.556Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在上一篇“javascript 难点剖析一：prototy（原型）”后, 我们紧接着来理解什么是闭包。闭包虽不是 javascript 的特色功能, 但要理解还真要费那么点工夫。</p><p>在理解闭包之前, 首先要清楚 javascript 中的作用域只有2种: <strong>全局作用域</strong> 和 <strong>方法作用域</strong>。全局作用域很好理解了, 方法作用域就是指一个 function 形成一个独立的作用域, 而且方法作用域还能够嵌套。</p></blockquote><p>&ensp;<br>与别的语言不同的是: 花括号 “{}” 不能形成一个独立的作用域, 例如 Java 中的作用域</p><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> global = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">    * 这里面就形成了一个方法作用域</span></div><div class="line"><span class="comment">    * 能够保护其中的变量不能被外部访问</span></div><div class="line"><span class="comment">    * 但此方法作用域能够访问全局作用域</span></div><div class="line"><span class="comment">    */</span></div><div class="line">    </div><div class="line">    <span class="keyword">var</span> local1 = <span class="number">1</span>;</div><div class="line">    <span class="built_in">console</span>.log(global);</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">    * 嵌套方法作用域</span></div><div class="line"><span class="comment">    */</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        </div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">        * 这里再度形成了一个方法作用域</span></div><div class="line"><span class="comment">        * 这个作用域内可以访问外部的作用域变量 local1</span></div><div class="line"><span class="comment">        */</span></div><div class="line">        </div><div class="line">        <span class="keyword">var</span> local2 = <span class="number">2</span>;</div><div class="line">        <span class="built_in">console</span>.log(local1);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">    * 在 inner 方法的作用域外就不能访问其内属性了</span></div><div class="line"><span class="comment">    */</span></div><div class="line">    </div><div class="line">    <span class="built_in">console</span>.log(local2); <span class="comment">// 报错 ReferenceError: aa is not defined</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">foo();</div><div class="line"><span class="built_in">console</span>.log(local1); <span class="comment">// 报错 ReferenceError: a is not defined</span></div></pre></td></tr></table></figure><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>我们以 for 循环开始</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(i);</div><div class="line">    &#125;, <span class="number">1000</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>思考：这段代码会输出什么呢？<br>仔仔细细看了 30 秒，战战兢兢地说：每隔 1 秒后按顺序输出 0-9 吗？<br>0, 1, 2, 3, 4, 5, 6, 7, 8, 9</p></blockquote><p>&ensp;<br>我们将这段代码放到浏览器中执行一下得出结果：<br>在 1 秒后几乎同时输出了 10 个 10（注意不是每隔 1 秒输出一个 10）</p><h3 id="为什么？"><a href="#为什么？" class="headerlink" title="为什么？"></a>为什么？</h3><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>因为 setTimeout 是异步执行！！</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>这是由于 javascript 的 “<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop" target="_blank" rel="external">消息队列</a>” 和 “异步函数” 机制导致的结果。</p><blockquote><p>知识普及：</p><p>栈：<br>JavaScript 是单线程语言，主线程执行同步代码。<br>函数调用时，便会在内存形成了一个“调用记录”，又称“调用帧”，保存调用位置和内部变量等信息。如果函数内部还调用了其他函数，那么在调用记录上方又会形成一个调用记录，所有的调用记录就形成一个“调用栈”。</p><p>堆：<br>对象被分配在一个堆中，一个用以表示一个内存中大的未被组织的区域。</p><p>消息队列与事件循环Event Loop：<br>一个 JavaScript 运行时包含了一个待处理的消息队列（异步任务），（内部是不进入主线程，而进入”任务队列”（task queue）的任务。比如UI事件、ajax网络请求、定时器setTimeout和setInterval等。<br>每一个消息都与一个函数（回调函数callback）相关联。当栈为空时，从队列中取出一个消息进行处理。这个处理过程包含了调用与这个消息相关联的函数（以及因而创建了一个初始堆栈帧）。当栈再次为空的时候，也就意味着消息处理结束。<br>这个过程是循环不断的，所以整个的这种运行机制又称为Event Loop（事件循环）。</p><p>javascript 是单线程，主线程执行同步代码，事件、 I/O 操作等异步任务，将会进入任务队列执行，异步执行有结果之后，就会变为等待状态，形成一个先进先出的执行栈，主线程的同步代码执行完之后，再从”任务队列”中读取事件，执行事件异步任务的回调。<br>这就是为什么执行顺序是， 同步 &gt; 异步 &gt; 回调<br>更简单的说：只要主线程空了（同步），就会去读取”任务队列”（异步），这就是 JavaScript 的运行机制。</p></blockquote><p>&ensp;<br>举个野栗子便于理解</p><p>因为 setTimeout 是异步执行，所以我们可以将这个 for 循环拆成 2 个部分：<br>    第一个部分专门处理 i 值的变化<br>    第二个部分专门执行 setTimeout</p><p>因此我们可以得到如下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">/** </span></div><div class="line"><span class="comment">* 第一个部分</span></div><div class="line"><span class="comment">*/</span></div><div class="line">i++;</div><div class="line"></div><div class="line"><span class="comment">// 省略 8 次   </span></div><div class="line"></div><div class="line">i++;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* 直到这里，一直在做变量 i 的自增计算</span></div><div class="line"><span class="comment">* i 的值自增到10</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* 第二个部分</span></div><div class="line"><span class="comment">*/</span></div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">&#125;, <span class="number">1000</span>);</div><div class="line"></div><div class="line"><span class="comment">//省略 8 次</span></div><div class="line"></div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">&#125;, <span class="number">1000</span>);</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* 到这里，执行了 10 次完全相同的代码</span></div><div class="line"><span class="comment">* 且同步设置了延迟为 1 秒的10个定时器</span></div><div class="line"><span class="comment">* 1秒后，10 个同时输出了 i 的值</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure><p>当执行到第一个 setTimeout 时，javascript 内核检测到这是一个异步函数，所以将这个异步函数移入了消息队列，等待所有主线同步任务的完成后再继续执行。<br>接着第二个、第三个 setTimeout 异步函数依次执行相同操作。<br>直到将第 10 个 setTimeout 异步函数加入消息队列后，同步任务执行完成，然后才开始以先进先出的原则调用“消息队列”里面的异步函数。</p><h4 id="提升"><a href="#提升" class="headerlink" title="提升"></a>提升</h4><p>以上的疑惑解决了之后，我们再来看一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(i);</div><div class="line">    &#125;, <span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这段代码与上面的不同之处是将 1000 的延迟改为了 0！</p><blockquote><p>思考：这段代码会输出什么呢？<br>随便想了想，上面的有 1000 毫秒的延迟，变量 i 才会瞬间执行到 10，而这里为 0，说明没有延迟，也就是说没有给变量 i 变化的时间，所以答案肯定是<br>0, 1, 2, 3, 4, 5, 6, 7, 8, 9</p></blockquote><p>&ensp;<br>我们将这段代码放到浏览器中执行一下得出结果：<br>几乎同时输出了 10 个 10<br>有的童鞋可能又要疑惑了，为什么？？？？？<br>有这样疑问的童鞋建议把原理认认真真再看一遍，还要多吃点上面的‘野栗子’，有助于理解。</p><h3 id="为什么-setTimeout-中匿名函数没有形成闭包呢？"><a href="#为什么-setTimeout-中匿名函数没有形成闭包呢？" class="headerlink" title="为什么 setTimeout 中匿名函数没有形成闭包呢？"></a>为什么 setTimeout 中匿名函数没有形成闭包呢？</h3><h4 id="原因-1"><a href="#原因-1" class="headerlink" title="原因"></a>原因</h4><p>因为 setTimeout 中的匿名函数没有将 i 作为参数传入来固定这个变量的值, 让其保留下来, 而是直接引用了外部作用域中的 i, 根据上面的 javascript 机制（先同步，再异步），因此 i 变化时, 也影响到了匿名函数。</p><p>因此如果我们定义一个外部函数, 让 i 作为参数传入，即可“闭包”我们要的变量了！！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">    <span class="comment">// 注意关键是我们把想要闭包的值当参数传入一个方法</span></div><div class="line">    <span class="comment">// 这个方法 return 一个新的方法 -- 闭包!!</span></div><div class="line">    setTimeout(fn(i), <span class="number">1000</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 为了深刻理解闭包, 这个函数我没有用参数</span></div><div class="line">    <span class="comment">// 神奇的"闭包"发生在这一步, 其实就是作用域和值复制在起了关键作用,</span></div><div class="line">    <span class="comment">// 对于数字/字符等类型是复制值, 而不是引用</span></div><div class="line">    <span class="keyword">var</span> a = <span class="built_in">arguments</span>[<span class="number">0</span>];</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(a); <span class="comment">// 注意现在我操作的变量已经变成 a 了,</span></div><div class="line">        <span class="comment">// 已经和 i 没有半毛线关系了!</span></div><div class="line">        <span class="comment">// 而 a 的值就是当时执行时赋予的一个确定值,</span></div><div class="line">        <span class="comment">// 不会因 i 的变化而变化了!</span></div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="提升-1"><a href="#提升-1" class="headerlink" title="提升"></a>提升</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</div><div class="line">        <span class="comment">// 变量 i 的值在传递到这个作用域时被复制给了 a,</span></div><div class="line">        <span class="comment">// 因此这个值就不会随外部变量而变化了</span></div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(a);</div><div class="line">        &#125;, <span class="number">1000</span>);</div><div class="line">    &#125;)(i); <span class="comment">// 我们在这里传入参数来"闭包"变量</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>写在最后：真正理解了作用域也就理解了闭包</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在上一篇“javascript 难点剖析一：prototy（原型）”后, 我们紧接着来理解什么是闭包。闭包虽不是 javascript 的特色功能, 但要理解还真要费那么点工夫。&lt;/p&gt;
&lt;p&gt;在理解闭包之前, 首先要清楚 javascript 中
      
    
    </summary>
    
      <category term="javascript" scheme="http://www.xieyangogo.cn/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://www.xieyangogo.cn/tags/javascript/"/>
    
      <category term="closure（闭包）" scheme="http://www.xieyangogo.cn/tags/closure%EF%BC%88%E9%97%AD%E5%8C%85%EF%BC%89/"/>
    
      <category term="javascript作用域" scheme="http://www.xieyangogo.cn/tags/javascript%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    
      <category term="javascript核心" scheme="http://www.xieyangogo.cn/tags/javascript%E6%A0%B8%E5%BF%83/"/>
    
      <category term="javascript消息队列" scheme="http://www.xieyangogo.cn/tags/javascript%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
      <category term="javascript同步、异步" scheme="http://www.xieyangogo.cn/tags/javascript%E5%90%8C%E6%AD%A5%E3%80%81%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>javascript难点剖析一：prototype（原型）</title>
    <link href="http://www.xieyangogo.cn/2014/12/23/javascript%E9%9A%BE%E7%82%B9%E5%89%96%E6%9E%90%E4%B8%80%EF%BC%9Aprototype%EF%BC%88%E5%8E%9F%E5%9E%8B%EF%BC%89/"/>
    <id>http://www.xieyangogo.cn/2014/12/23/javascript难点剖析一：prototype（原型）/</id>
    <published>2014-12-23T07:50:00.000Z</published>
    <updated>2017-10-20T02:38:55.556Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>要理解 javascript 中的 prototype，首先必须弄清楚以下几个概念</p><ol><li>javascript 中所有的东西都是对象</li><li>javascript 中所有的东西都由 Object 衍生而来, 即所有东西原型链的终点指向 Object.prototype<br>[“constructor”, “toString”, “toLocaleString”, “valueOf”, “hasOwnProperty”, “isPrototypeOf”, “propertyIsEnumerable”, “<strong>defineGetter</strong>“, “<strong>lookupGetter</strong>“, “<strong>defineSetter</strong>“, “<strong>lookupSetter</strong>“]<br>console.log(Object.getOwnPropertyNames(Object.prototype));</li><li>javascript 中构造函数和实例(对象)之间的微妙关系<br>构造函数通过定义 prototype 来约定其实例的规格, 再通过 new 来构造出实例, 他们的作用就是生产对象.<br>而构造函数本身又是 Function 的实例, 因此也可以查到它的 <strong>proto</strong> (原型链)</li></ol></blockquote><h3 id="构造函数与实例"><a href="#构造函数与实例" class="headerlink" title="构造函数与实例"></a>构造函数与实例</h3><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>   Object              //javascript 原生API提供的构造函数<br>   function Foo() {}   //自定义的构造函数</p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>   new Object()<br>   new Foo()<br>   实例就“只能”查看 <strong>proto</strong> 来得知自己是基于什么 prototype 被制造出来的，而“不能”再重新定义实例的 prototype （即不能定义实例的实例）</p><h3 id="构造函数到底是什么"><a href="#构造函数到底是什么" class="headerlink" title="构造函数到底是什么"></a>构造函数到底是什么</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Empty</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span>.prototype, <span class="built_in">Function</span>.__proto__)     <span class="comment">// Object &#123;&#125;</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Empty</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype, <span class="built_in">Object</span>.__proto__)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;&#125;       <span class="comment">// Foo &#123;&#125;                            </span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Empty</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="built_in">console</span>.log(Foo.prototype, Foo.__proto__)</div></pre></td></tr></table></figure><p>prototype 输出的格式为: 构造函数名 原型</p><p>首先看下Object.prototype输出了什么?<br>Object {} -&gt; 前面的Object为构造函数的名称, 后面的那个表示原型, 这里是一个{}, 即一个Object对象的实例(空对象)<br>那么 Foo {} 我们就明白是什么意思了, Foo 就是构造函数的名称, 原型也是一个空对象</p><p>再来看看由构造函数构造出来的实例<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();       <span class="comment">// var o = &#123;&#125;;      // undefined              </span></div><div class="line"><span class="built_in">Object</span> &#123;&#125;</div><div class="line"><span class="built_in">console</span>.log(o.prototype, o.__proto__);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="keyword">var</span> i = <span class="keyword">new</span> Foo();            <span class="comment">// undefined              </span></div><div class="line">Foo &#123;&#125;</div><div class="line"><span class="built_in">console</span>.log(i.prototype, i.__proto__);</div></pre></td></tr></table></figure></p><p>我们再深入一点, 定义下 F 的原型看看到底会发生些什么?<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">Foo.prototype.a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"><span class="keyword">var</span> i = <span class="keyword">new</span> Foo();       <span class="comment">// undefined              </span></div><div class="line">Foo &#123;<span class="attr">a</span>: <span class="function"><span class="keyword">function</span>&#125;</span></div><div class="line"><span class="function"><span class="title">console</span>.<span class="title">log</span>(<span class="params">i.prototype, i.__proto__</span>);</span></div></pre></td></tr></table></figure></p><p>这样我们就清楚的看到 i 是由 Foo 构造出来的, 原型是 {a: function}, 就是原本的空对象原型新增了一个 a 方法</p><p>我们再换一种情况, 完全覆盖 Foo 的原型会怎么样?<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">Foo.prototype = &#123;</div><div class="line">   a: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> i = <span class="keyword">new</span> Foo();      <span class="comment">// undefined             </span></div><div class="line"><span class="built_in">Object</span> &#123;<span class="attr">a</span>: <span class="function"><span class="keyword">function</span>&#125;</span></div><div class="line"><span class="function"><span class="title">console</span>.<span class="title">log</span>(<span class="params">i.prototype, i.__proto__</span>);</span></div></pre></td></tr></table></figure></p><p>咦~ 为什么这里表明 i 是由 Object 构造出来的? 不对吧!<br>因为我们完全将 Foo 的 prototype 覆盖, 其实也就是将原型指定为对象{a: function}, 但这会造成原本的 constructor 信息丢失, 变成了对象{a: function}指定的 constructor。<br>那么对象{a: function}的constructor是什么呢?<br>因为对象{a: function}其实就相对于<br>var o = {a: function() {}} // new了一个Object<br>那么 o 的 constructor 当然是 Object 啦</p><p>我们来纠正下这个错误<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">Foo.prototype = &#123;</div><div class="line">   a: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>重新指定正确的构造函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Foo.prototype.constructor = Foo;</div><div class="line"><span class="keyword">var</span> i = <span class="keyword">new</span> Foo();   <span class="comment">// undefined             </span></div><div class="line">Foo &#123;<span class="attr">a</span>: <span class="function"><span class="keyword">function</span>, <span class="title">constructor</span>: <span class="title">function</span>&#125;</span></div><div class="line"><span class="function"><span class="title">console</span>.<span class="title">log</span>(<span class="params">i.prototype, i.__proto__</span>);</span></div></pre></td></tr></table></figure></p><p>现在又能得到正确的原型信息了</p><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>简单的来讲和OOP中的继承关系(链)是一样的, 一层一层往上找, 直至最终的 Object.prototype<br>prototype chain</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;要理解 javascript 中的 prototype，首先必须弄清楚以下几个概念&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;javascript 中所有的东西都是对象&lt;/li&gt;
&lt;li&gt;javascript 中所有的东西都由 Object 衍生而来, 即所有东西
      
    
    </summary>
    
      <category term="javascript" scheme="http://www.xieyangogo.cn/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://www.xieyangogo.cn/tags/javascript/"/>
    
      <category term="prototype（原型）" scheme="http://www.xieyangogo.cn/tags/prototype%EF%BC%88%E5%8E%9F%E5%9E%8B%EF%BC%89/"/>
    
      <category term="javascript原型链" scheme="http://www.xieyangogo.cn/tags/javascript%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
      <category term="面向对象编程" scheme="http://www.xieyangogo.cn/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>CSS 960 grid 入门</title>
    <link href="http://www.xieyangogo.cn/2014/11/21/CSS-960-grid-%E5%85%A5%E9%97%A8/"/>
    <id>http://www.xieyangogo.cn/2014/11/21/CSS-960-grid-入门/</id>
    <published>2014-11-21T09:05:00.000Z</published>
    <updated>2017-10-20T02:38:55.540Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>960 GRID SYSTEM 官网 <a href="http://960.gs/" target="_blank" rel="external">http://960.gs/</a></p></blockquote><h3 id="什么是CSS框架？"><a href="#什么是CSS框架？" class="headerlink" title="什么是CSS框架？"></a>什么是CSS框架？</h3><p>CSS框架是一种你能够使用在你的web项目中概念上的结构，是别人已经写完的，而且很完善的CSS定义集合。CSS框架一般是CSS文件的集合，包括基本风格的字体排版，表单样式，表格布局等等，比如：</p><ul><li>grid.css 表格布局</li><li>layout.css 布局</li><li>form.css 表单</li><li>general.css CSS常规设置</li></ul><h3 id="CSS框架的种类："><a href="#CSS框架的种类：" class="headerlink" title="CSS框架的种类："></a>CSS框架的种类：</h3><p>CSS框架很多，可以说太多了，最近几年像潮水般涌出。只是国内用CSS框架的不多，倒是PHP框架和Spring框架用的更多些。比较著名的CSS框架如下，不同的框架完成的任务不一定完全一样，每个框架都有自己的特色：</p><ul><li>YUI Grids CSS</li><li>Blueprint</li><li>YAML CSS Framework</li><li>CleverCSS</li><li>…</li></ul><h3 id="960Grid"><a href="#960Grid" class="headerlink" title="960Grid"></a>960Grid</h3><p>由于电脑显示器有方屏、宽屏，宽屏又分16:9和16:10。分辨率更是多种多样，这么多不同模式下得用户如何能看到外观整齐、一致的网站呢？人们发现一个奇妙的事情：960px的宽度是Very Good！无论什么屏，那种分辨率都通吃。<br>现在有人专门开发了一组网站架构CSS规则，只要遵守这些简单的规则（其实就是class类），你就能快速设计出960px宽度的网页结构来。<br>这，就是960Grid。<br>官网：<a href="http://960.gs/" target="_blank" rel="external">http://960.gs/</a></p><h3 id="法律问题"><a href="#法律问题" class="headerlink" title="法律问题"></a>法律问题</h3><p>960网格系统的文件都是免费的，MIT / GPL开源许可协议。大家可以放心大胆使用。</p><h3 id="如何使用960Grid框架？"><a href="#如何使用960Grid框架？" class="headerlink" title="如何使用960Grid框架？"></a>如何使用960Grid框架？</h3><ul><li><p>在html文件中引入相关的外部CSS文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/reset.css"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/text.css"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/960.css"</span> /&gt;</span></div></pre></td></tr></table></figure><blockquote><p>在这必须解释一下，960.css为主要排版样式，缺它肯定不行。还有两个css文件：reset.css和text.css，它们的主要作用是为了消除浏览器间显示差异准备的，前者消除了html标签在各浏览器间的差异，而后者则主要针对的是字体。</p></blockquote></li></ul><p>&ensp;</p><ul><li><p>定义一个DIV大容器，放下整个页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container_12"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>  这个DIV块一定要设定12列还是16列，其实不管12列还是16列宽度都是960px，只不过看你需不需要更细分的列了。</p></li><li><p>在这个DIV大容器里开始布局网页，首先添加一个LOGO栏，这个栏横向跨越整个960宽度：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container_12"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid_12"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>  此时，注意了，在12列的container中，使用了一个12列的grid，下划线后数字就是该DIV所占的列数。当然为了布局方便，我们一定会加入更多的class或id的，最后如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container_12"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid_12 logo"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>  设置好 .logo 的CSS的高和背景图片后，能看到如下图所示的界面：<br><img src="/blog/images/CSS-960-grid/css-960-1.jpg" alt=""></p></li></ul><h3 id="设置导航栏"><a href="#设置导航栏" class="headerlink" title="设置导航栏"></a>设置导航栏</h3><p>刚才那个logo块其实已经完工了，但为了清除它对身后的CSS设置影响，建议在每个横向DIV大块做完之后，都加上class=”clear”进行收尾。所以刚才的代码现在更改如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container_12"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid_12"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clear"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><p>然后再加入导航栏的DIV块，和LOGO一样，也是一个横向大块，设置后代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container_12"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid_12 logo"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clear"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid_12 nav"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span>...<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clear"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><p>添加样式后，网页变为这样：<br><img src="/blog/images/CSS-960-grid/css-960-2.jpg" alt=""></p><h3 id="添加PhotoSlide的位置"><a href="#添加PhotoSlide的位置" class="headerlink" title="添加PhotoSlide的位置"></a>添加PhotoSlide的位置</h3><p>一般网站为了漂亮和醒目，会在nav下加入photoslide，有的是js的，有的是flash的，但无论哪种都能把网站衬托起来。当然例子中就不真的放photoslide了。现在要把横行分为两个部分：left和right，left写文字，right放个图片提提神。<br>按原案例样子，left会占据7列的宽度，right将占据5列的宽度，7+5=12列！所以一个class用grid_7，另一个用gird_5。然后直接在块后加上clear类。由于这两个块高度一致，边框也一致，所以都加入一个topslider类设置它们的共同特征。<br>现在把代码写好：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container_12"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid_12 logo"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clear"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid_12 nav"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span>...<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clear"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid_7 topslider"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid_5 topslider"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clear"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><p>填入其它Html标记和各种素材，完成后，如下图所示：<br><img src="/blog/images/CSS-960-grid/css-960-3.jpg" alt=""></p><h3 id="完成接下来的代码"><a href="#完成接下来的代码" class="headerlink" title="完成接下来的代码"></a>完成接下来的代码</h3><p>用两段grid_12的名为class=”spacer”的div夹住四篇文章部分，四篇文章分别使用四个grid_3来完成。为什么是四个grid_3呢？横向12列，4篇等宽文章，每篇12/4=3！如果到现在你还有这个疑问，说明你其实没弄明白960grid的原理。建议回到页首再看下来。<br>加入很多代码后：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container_12"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid_12 logo"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clear"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid_12 nav"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span>...<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clear"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid_7 topslider"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid_5 topslider"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clear"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid_12 spacer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clear"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid_3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid_3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid_3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid_3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clear"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid_12 spacer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clear"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid_4 footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid_4 footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid_4 footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><p>然后添加内容，设置CSS，就是这个页面了：<br><img src="/blog/images/CSS-960-grid/css-960-4.jpg" alt=""></p><p>到目前为止，能明白960Grid原理就达到目的。接下来的是关于这个框架的高级内容部分。</p><h3 id="高级部分："><a href="#高级部分：" class="headerlink" title="高级部分："></a>高级部分：</h3><h4 id="alpha和omega参数"><a href="#alpha和omega参数" class="headerlink" title="alpha和omega参数"></a>alpha和omega参数</h4><p>默认情况下，左右margin都是10px，则列间距为20px，但最左边的容器不需要左margin，最右边的容器不需要右margin，所以要改成这样，用alpha出去左margin，omega除去右margin：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container_12″&gt;</span></span></div><div class="line"><span class="tag"><span class="string">    &lt;div class="</span><span class="attr">grid_2</span> <span class="attr">alpha</span>"&gt;</span>左侧导航栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid_8″&gt;主版块&lt;/div&gt;</span></span></div><div class="line"><span class="tag"><span class="string">    &lt;div class="</span><span class="attr">grid_2</span> <span class="attr">omega</span>"&gt;</span>右侧广告栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><h4 id="prefix和suffix参数"><a href="#prefix和suffix参数" class="headerlink" title="prefix和suffix参数"></a>prefix和suffix参数</h4><p>如同上面那两个margin快捷参数一样，不必非得单独为某个div单独命名id或class，960Grid已经提供了prefix和suffix来处理padding。左侧补白（padding-left）是prefix_i，右侧的是suffix_i。i的值就是补白所占的列数，比如你想左侧加2列补白，则可以使用：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid_5 prefix_2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><h4 id="push和pull参数"><a href="#push和pull参数" class="headerlink" title="push和pull参数"></a>push和pull参数</h4><p>最绝的还是这两个参数，一般人用的不多。因为大家都满足自己的网页宽度是960px了，如果现在真想把其中一个涉及到图片或广告的div做到1024px宽，怎么办？其实很好解决，一个div做reletive，它的子div的为absolue并且left为负值就可以，但这种CSS有点麻烦。<br>960Grid提供push和pull参数，push是推，pull是拉。关键是在什么位置推拉，就是说那里才是动作的起点？我们浏览网页时几乎都是自左向右看，所以该动作也以左侧为起点，现在想象你就站在最左边。push_i就是把一个块向右推移i个列宽，pull_i就是把这个块向左拉i个列宽。<br>push和pull动作对其他兄弟块没有影响。可以直接推出960px去它就在整个网页右边独单显示了，也可以pull出来，就在左边单独显示了。有点像sohu侧边广告的感觉。上个图，直观感受下吧，但sohu可不是用push和pull做出来的，我的意思是和sohu的效果一样。<br><img src="/blog/images/CSS-960-grid/css-960-5.jpg" alt=""></p><h4 id="clear参数"><a href="#clear参数" class="headerlink" title="clear参数"></a>clear参数</h4><p>class=”clear”，什么时候用呢。当你想换行的时候就使用它，即使一个横行只有grid_5和grid_4，就是说没有占满12列，也可以在其后增加一个让其后的任何内容都从下一行行首开始：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clear"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><p>如果遇到这种情况：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid_4"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid_5"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clear"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid_3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>原本横向占满12列的4+5+3，中间夹个clear。会发生什么事呢？grid_3这个块就会从下一个横行最左边出现。所以clear就是一个回车，相当于块的 &lt;br /&gt;。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>margin参数是alpha和omega；</li><li>padding参数是prefix和suffix；</li><li>脱离文档流移动参数是push和pull；</li><li>clear是块回车换行。</li></ul><blockquote><p>960 grid css web框架。或许不能称作框架。<br>官方网站：<a href="http://960.gs/" target="_blank" rel="external">http://960.gs/</a></p><p>因为：</p><p>960px = 12 <em> (60px + 20px) = 16 </em> (40px + 20px) = 24 * (30px + 10px)</p><p>所以：</p><p>960 个像素作 12 栏、16栏或 24 栏分割</p><p>12 栏和 16 栏分割的每个 grid 左右 margin 各 10px，24 栏分割每个 grid 左右 margin 各 5px。</p></blockquote><p>&ensp;</p><p>几个重要的关键字和概念:</p><ul><li>container容器：960px的宽度，左右margin auto 居中。</li><li>grid_x x方格：最小方格宽度*x px宽度+左margin 10px+右margin 10px（24栏布局分别为5px）</li><li>prefix_x前间距：使用padding属性。让grid和前面保持（最小方格宽度+间距）<em>x的距离.(例如 12栏的 prefix_3 的前间距为 （60px+20px）</em>3 即向前隔开三个方格的距离 )。</li><li>suffix_x 后间距：同理prefix_x,向后隔开x个方格。</li><li>pull_x 向左推：在正常的布局下向左推x个方格。</li><li>push_x 向右推：在正常的布局下向右推x个方格。</li><li>alpha 清除前间距：清除使用该class方格的前间距，方格会自动全部向前。</li><li>omega 清楚后间距：清除使用该class方格的后间距。</li><li><p>clear 换行（或者这样说有不妥）：重新换行继续方格布局。</p></li><li><p>心得：container 容器一定要外包在所有的grid布局的外面。它就像一页纸一样，我们可以在内部写方格。grid_x控制方格的宽度，prefix_x suffix_x控制方格间距，pull_x push_x控制方格左右浮动，alpha omega 清除左右的margin。clear 换行。</p></li><li>所以呢，可以理解为就是类似于在container内用方格写字就好啦！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;960 GRID SYSTEM 官网 &lt;a href=&quot;http://960.gs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://960.gs/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;什么是C
      
    
    </summary>
    
      <category term="css" scheme="http://www.xieyangogo.cn/categories/css/"/>
    
    
      <category term="css" scheme="http://www.xieyangogo.cn/tags/css/"/>
    
      <category term="css960" scheme="http://www.xieyangogo.cn/tags/css960/"/>
    
  </entry>
  
  <entry>
    <title>高效 jQuery 的奥秘</title>
    <link href="http://www.xieyangogo.cn/2014/11/20/%E9%AB%98%E6%95%88-jQuery-%E7%9A%84%E5%A5%A5%E7%A7%98/"/>
    <id>http://www.xieyangogo.cn/2014/11/20/高效-jQuery-的奥秘/</id>
    <published>2014-11-20T07:10:00.000Z</published>
    <updated>2017-10-20T02:38:55.571Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>讨论 jQuery 和 JavaScript 性能的文章并不罕见。然而，本文我计划总结一些速度方面的技巧和我本人的一些建议，来提升你的 jQuery 和 JavaScript 代码。好的代码会带来速度的提升。快速渲染和响应意味着更好的用户体验。<br>首先，在脑子里牢牢记住 jQuery 就是 JavaScript 。这意味着我们应该采取相同的编码惯例、风格指南和最佳实践。</p><p>首先，如果你是一个 javascript 新手，我建议您阅读 《<a href="http://code.tutsplus.com/tutorials/24-javascript-best-practices-for-beginners--net-5399" target="_blank" rel="external">24 JavaScript Best Practices for Beginners</a>》（译文《<a href="http://www.xieyangogo.cn/blog/2017/09/30/%E5%88%9D%E5%AD%A6-javascript-%E7%9A%84-24-%E6%9D%A1%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/">给JavaScript初学者的24条最佳实践</a>》） ,这是一篇高质量的 javascript 教程，接触 jQuery 之前最好先阅读。</p></blockquote><p>当你准备使用 jQuery ，我强烈建议你遵循下面这些指南：</p><h3 id="缓存变量"><a href="#缓存变量" class="headerlink" title="缓存变量"></a>缓存变量</h3><p>DOM遍历是昂贵的，所以尽量将会被重用的元素缓存。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 糟糕</span></div><div class="line"> h = $(<span class="string">'#element'</span>).height();</div><div class="line"> $(<span class="string">'#element'</span>).css(<span class="string">'height'</span>, h - <span class="number">20</span>);</div><div class="line"> </div><div class="line"> <span class="comment">// 建议</span></div><div class="line"> $element = $(<span class="string">'#element'</span>);</div><div class="line"> h = $element.height();</div><div class="line"> $element.css(<span class="string">'height'</span>, h - <span class="number">20</span>);</div></pre></td></tr></table></figure><h3 id="避免全局变量"><a href="#避免全局变量" class="headerlink" title="避免全局变量"></a>避免全局变量</h3><p>jQuery与JavaScript一样，一般来说，最好确保你的变量在函数作用域内。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 糟糕</span></div><div class="line">$element = $(<span class="string">'#element'</span>);</div><div class="line">h = $element.height();</div><div class="line">$element.css(<span class="string">'height'</span>, h - <span class="number">20</span>);</div><div class="line"></div><div class="line"><span class="comment">// 建议</span></div><div class="line"><span class="keyword">var</span> $element = $(<span class="string">'#element'</span>);</div><div class="line"><span class="keyword">var</span> h = $element.height();</div><div class="line">$element.css(<span class="string">'height'</span>, h - <span class="number">20</span>);</div></pre></td></tr></table></figure><h3 id="使用匈牙利命名法"><a href="#使用匈牙利命名法" class="headerlink" title="使用匈牙利命名法"></a>使用匈牙利命名法</h3><p>在变量前加$前缀，便于识别出jQuery对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 糟糕</span></div><div class="line"><span class="keyword">var</span> first = $(<span class="string">'#first'</span>);</div><div class="line"><span class="keyword">var</span> second = $(<span class="string">'#second'</span>);</div><div class="line"><span class="keyword">var</span> value = $first.val();</div><div class="line"></div><div class="line"><span class="comment">// 建议 - 在jQuery对象前加$前缀</span></div><div class="line"><span class="keyword">var</span> $first = $(<span class="string">'#first'</span>);</div><div class="line"><span class="keyword">var</span> $second = $(<span class="string">'#second'</span>);</div><div class="line"><span class="keyword">var</span> value = $first.val();</div></pre></td></tr></table></figure><h3 id="使用-Var-链（单-Var-模式）"><a href="#使用-Var-链（单-Var-模式）" class="headerlink" title="使用 Var 链（单 Var 模式）"></a>使用 Var 链（单 Var 模式）</h3><p>将多条var语句合并为一条语句，我建议将未赋值的变量放到后面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span></div><div class="line">    $first = $(<span class="string">'#first'</span>),</div><div class="line">    $second = $(<span class="string">'#second'</span>),</div><div class="line">    value = $first.val(),</div><div class="line">    k = <span class="number">3</span>,</div><div class="line">    cookiestring = <span class="string">'SOMECOOKIESPLEASE'</span>,</div><div class="line">    i,</div><div class="line">    j,</div><div class="line">    myArray = &#123;&#125;;</div></pre></td></tr></table></figure><h3 id="请使用-‘On’"><a href="#请使用-‘On’" class="headerlink" title="请使用 ‘On’"></a>请使用 ‘On’</h3><p>在新版jQuery中，更短的 on(“click”) 用来取代类似 click() 这样的函数。在之前的版本中 on() 就是 bind()。自从jQuery 1.7版本后，on() 附加事件处理程序的首选方法。然而，出于一致性考虑，你可以简单的全部使用 on()方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 糟糕</span></div><div class="line">$first.click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    $first.css(<span class="string">'border'</span>, <span class="string">'1px solid red'</span>);</div><div class="line">    $first.css(<span class="string">'color'</span>, <span class="string">'blue'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">$first.hover(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    $first.css(<span class="string">'border'</span>, <span class="string">'1px solid red'</span>);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 建议</span></div><div class="line">$first.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    $first.css(<span class="string">'border'</span>, <span class="string">'1px solid red'</span>);</div><div class="line">    $first.css(<span class="string">'color'</span>, <span class="string">'blue'</span>);</div><div class="line">&#125;)</div><div class="line"></div><div class="line">$first.on(<span class="string">'hover'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    $first.css(<span class="string">'border'</span>, <span class="string">'1px solid red'</span>);</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h3 id="精简javascript"><a href="#精简javascript" class="headerlink" title="精简javascript"></a>精简javascript</h3><p>一般来说,最好尽可能合并函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 糟糕</span></div><div class="line">$first.click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    $first.css(<span class="string">'border'</span>, <span class="string">'1px solid red'</span>);</div><div class="line">    $first.css(<span class="string">'color'</span>, <span class="string">'blue'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 建议</span></div><div class="line">$first.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    $first.css(&#123;</div><div class="line">        <span class="string">'border'</span>: <span class="string">'1px solid red'</span>,</div><div class="line">        <span class="string">'color'</span>: <span class="string">'blue'</span></div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><h3 id="链式操作"><a href="#链式操作" class="headerlink" title="链式操作"></a>链式操作</h3><p>jQuery实现方法的链式操作是非常容易的。下面利用这一点。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 糟糕</span></div><div class="line">$second.html(value);</div><div class="line">$second.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="string">'hello everybody'</span>);</div><div class="line">&#125;);</div><div class="line">$second.fadeIn(<span class="string">'slow'</span>);</div><div class="line">$second.animate(&#123;<span class="attr">height</span>: <span class="string">'120px'</span>&#125;, <span class="number">500</span>);</div><div class="line"></div><div class="line"><span class="comment">// 建议</span></div><div class="line">$second.html(value);</div><div class="line">$second.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="string">'hello everybody'</span>);</div><div class="line">&#125;).fadeIn(<span class="string">'slow'</span>).animate(&#123;<span class="attr">height</span>: <span class="string">'120px'</span>&#125;, <span class="number">500</span>);</div></pre></td></tr></table></figure><h3 id="维持代码的可读性"><a href="#维持代码的可读性" class="headerlink" title="维持代码的可读性"></a>维持代码的可读性</h3><p>伴随着精简代码和使用链式的同时，可能带来代码的难以阅读。添加缩紧和换行能起到很好的效果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 糟糕</span></div><div class="line">$second.html(value);</div><div class="line">$second.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="string">'hello everybody'</span>);</div><div class="line">&#125;).fadeIn(<span class="string">'slow'</span>).animate(&#123;<span class="attr">height</span>: <span class="string">'120px'</span>&#125;, <span class="number">500</span>);</div><div class="line"></div><div class="line"><span class="comment">// 建议</span></div><div class="line">$second.html(value);</div><div class="line">$second</div><div class="line">    .on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        alert(<span class="string">'hello everybody'</span>);</div><div class="line">    &#125;)</div><div class="line">    .fadeIn(<span class="string">'slow'</span>)</div><div class="line">    .animate(&#123;<span class="attr">height</span>: <span class="string">'120px'</span>&#125;, <span class="number">500</span>);</div></pre></td></tr></table></figure><h3 id="选择短路求值"><a href="#选择短路求值" class="headerlink" title="选择短路求值"></a>选择短路求值</h3><p>短路求值是一个从左到右求值的表达式，用 &amp;&amp;（逻辑与）或 || （逻辑或）操作符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 糟糕</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVar</span>(<span class="params">$myVar</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!$myVar) &#123;</div><div class="line">        $myVar = $(<span class="string">'#selector'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 建议</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVar</span>(<span class="params">$myVar</span>) </span>&#123;</div><div class="line">    $myVar = $myVar || $(<span class="string">'#selector'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="选择捷径"><a href="#选择捷径" class="headerlink" title="选择捷径"></a>选择捷径</h3><p>精简代码的其中一种方式是利用编码捷径。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 糟糕</span></div><div class="line"><span class="keyword">if</span> (collection.length &gt; <span class="number">0</span>) &#123;...&#125;</div><div class="line"></div><div class="line"><span class="comment">// 建议</span></div><div class="line"><span class="keyword">if</span> (collection.length) &#123;...&#125;</div></pre></td></tr></table></figure><h3 id="繁重的操作中分离元素"><a href="#繁重的操作中分离元素" class="headerlink" title="繁重的操作中分离元素"></a>繁重的操作中分离元素</h3><p>如果你打算对DOM元素做大量操作（连续设置多个属性或css样式），建议首先分离元素然后在添加。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 糟糕</span></div><div class="line"><span class="keyword">var</span></div><div class="line">    $container = $(<span class="string">"#container"</span>),</div><div class="line">    $containerLi = $(<span class="string">"#container li"</span>),</div><div class="line">    $element = <span class="literal">null</span>;</div><div class="line"></div><div class="line">$element = $containerLi.first();</div><div class="line"><span class="comment">//... 许多复杂的操作</span></div><div class="line"></div><div class="line"><span class="comment">// better</span></div><div class="line"><span class="keyword">var</span></div><div class="line">    $container = $(<span class="string">"#container"</span>),</div><div class="line">    $containerLi = $container.find(<span class="string">"li"</span>),</div><div class="line">    $element = <span class="literal">null</span>;</div><div class="line"></div><div class="line">$element = $containerLi.first().detach();</div><div class="line"><span class="comment">//... 许多复杂的操作</span></div><div class="line"></div><div class="line">$container.append($element);</div></pre></td></tr></table></figure><h3 id="熟记技巧"><a href="#熟记技巧" class="headerlink" title="熟记技巧"></a>熟记技巧</h3><p>你可能对使用jQuery中的方法缺少经验,一定要查看的文档，可能会有一个更好或更快的方法来使用它。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 糟糕</span></div><div class="line">$(<span class="string">'#id'</span>).data(key, value);</div><div class="line"></div><div class="line"><span class="comment">// 建议 (高效)</span></div><div class="line">$.data(<span class="string">'#id'</span>, key, value);</div></pre></td></tr></table></figure><h3 id="使用子查询缓存的父元素"><a href="#使用子查询缓存的父元素" class="headerlink" title="使用子查询缓存的父元素"></a>使用子查询缓存的父元素</h3><p>正如前面所提到的，DOM遍历是一项昂贵的操作。典型做法是缓存父元素并在选择子元素时重用这些缓存元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 糟糕</span></div><div class="line"><span class="keyword">var</span></div><div class="line">    $container = $(<span class="string">'#container'</span>),</div><div class="line">    $containerLi = $(<span class="string">'#container li'</span>),</div><div class="line">    $containerLiSpan = $(<span class="string">'#container li span'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 建议 (高效)</span></div><div class="line"><span class="keyword">var</span></div><div class="line">    $container = $(<span class="string">'#container '</span>),</div><div class="line">    $containerLi = $container.find(<span class="string">'li'</span>),</div><div class="line">    $containerLiSpan = $containerLi.find(<span class="string">'span'</span>);</div></pre></td></tr></table></figure><h3 id="避免通用选择符"><a href="#避免通用选择符" class="headerlink" title="避免通用选择符"></a>避免通用选择符</h3><p>将通用选择符放到后代选择符中，性能非常糟糕。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 糟糕</span></div><div class="line">$(<span class="string">'.container &gt; *'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 建议</span></div><div class="line">$(<span class="string">'.container'</span>).children();</div></pre></td></tr></table></figure><h3 id="避免隐式通用选择符"><a href="#避免隐式通用选择符" class="headerlink" title="避免隐式通用选择符"></a>避免隐式通用选择符</h3><p>通用选择符有时是隐式的，不容易发现。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 糟糕</span></div><div class="line">$(<span class="string">'.someclass :radio'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 建议</span></div><div class="line">$(<span class="string">'.someclass input:radio'</span>);</div></pre></td></tr></table></figure></p><h3 id="优化选择符"><a href="#优化选择符" class="headerlink" title="优化选择符"></a>优化选择符</h3><p>例如，Id选择符应该是唯一的，所以没有必要添加额外的选择符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 糟糕</span></div><div class="line">$(<span class="string">'div#myid'</span>);</div><div class="line">$(<span class="string">'div#footer a.myLink'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 建议</span></div><div class="line">$(<span class="string">'#myid'</span>);</div><div class="line">$(<span class="string">'#footer .myLink'</span>);</div></pre></td></tr></table></figure><h3 id="避免多个ID选择符"><a href="#避免多个ID选择符" class="headerlink" title="避免多个ID选择符"></a>避免多个ID选择符</h3><p>在此强调，ID 选择符应该是唯一的，不需要添加额外的选择符，更不需要多个后代ID选择符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 糟糕</span></div><div class="line">$(<span class="string">'#outer #inner'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 建议</span></div><div class="line">$(<span class="string">'#inner'</span>);</div></pre></td></tr></table></figure><h3 id="坚持最新版本"><a href="#坚持最新版本" class="headerlink" title="坚持最新版本"></a>坚持最新版本</h3><p>新版本通常更好：更轻量级，更高效。显然，你需要考虑你要支持的代码的兼容性。例如，2.0 版本不支持 ie 6/7/8。</p><h3 id="摒弃弃用方法"><a href="#摒弃弃用方法" class="headerlink" title="摒弃弃用方法"></a>摒弃弃用方法</h3><p>关注每个新版本的废弃方法是非常重要的并尽量避免使用这些方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 糟糕 - live 已经废弃</span></div><div class="line">$(<span class="string">'#stuff'</span>).live(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'hooray'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 建议</span></div><div class="line">$(<span class="string">'#stuff'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'hooray'</span>);</div><div class="line">&#125;);<span class="comment">// 注：此处可能不当，应为live能实现实时绑定，delegate或许更合适</span></div></pre></td></tr></table></figure><h3 id="利用CDN"><a href="#利用CDN" class="headerlink" title="利用CDN"></a>利用CDN</h3><p>谷歌的CND能保证选择离用户最近的缓存并迅速响应。（使用谷歌CND请自行搜索地址，此处地址以不能使用，推荐jquery官网提供的CDN）。</p><h3 id="必要时组合-jQuery-和-javascript-原生代码"><a href="#必要时组合-jQuery-和-javascript-原生代码" class="headerlink" title="必要时组合 jQuery 和 javascript 原生代码"></a>必要时组合 jQuery 和 javascript 原生代码</h3><p>如上所述，jQuery 就是 javascript ，这意味着用 jQuery 能做的事情，同样可以用原生代码来做。原生代码（或 <a href="http://google.urlshare.cn/" target="_blank" rel="external">vanilla</a>）的可读性和可维护性可能不如 jQuery，而且代码更长。但也意味着更高效（通常更接近底层代码可读性越差，性能越高，例如：汇编，当然需要更强大的人才可以）。牢记没有任何框架能比原生代码更小，更轻，更高效（注：测试链接已失效，可上网搜索测试代码）。</p><p>鉴于 vanilla 和 jQuery 之间的性能差异，我强烈建议吸收两人的精华，使用（可能的话）和 <a href="http://www.leebrimelow.com/native-methods-jQuery/" target="_blank" rel="external">jQuery 等价的原生代码</a>。</p><h3 id="最后忠告"><a href="#最后忠告" class="headerlink" title="最后忠告"></a>最后忠告</h3><p>最后，我记录这篇文章的目的是提高 jQuery 的性能和其他一些好的建议。如果你想深入的研究对这个话题你会发现很多乐趣。记住，jQuery 并非不可或缺，仅是一种选择。思考为什么要使用它。DOM 操作？ajax？模版？css 动画？还是选择符引擎？或许 javascript 微型框架或 jQuery 的定制版是更好的选择。</p><blockquote><p>注：本文为翻译文章，原文为 “<a href="http://flippinawesome.org/2013/11/25/writing-better-jquery-code/" target="_blank" rel="external">Writing Better jQuery Code</a>“。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;讨论 jQuery 和 JavaScript 性能的文章并不罕见。然而，本文我计划总结一些速度方面的技巧和我本人的一些建议，来提升你的 jQuery 和 JavaScript 代码。好的代码会带来速度的提升。快速渲染和响应意味着更好的用户体验。&lt;b
      
    
    </summary>
    
      <category term="jQuery" scheme="http://www.xieyangogo.cn/categories/jQuery/"/>
    
    
      <category term="jQuery" scheme="http://www.xieyangogo.cn/tags/jQuery/"/>
    
      <category term="javascript" scheme="http://www.xieyangogo.cn/tags/javascript/"/>
    
      <category term="效率" scheme="http://www.xieyangogo.cn/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>初学 HTML 的 30 条最佳实践</title>
    <link href="http://www.xieyangogo.cn/2014/11/20/%E5%88%9D%E5%AD%A6-HTML-%E7%9A%84-30-%E6%9D%A1%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <id>http://www.xieyangogo.cn/2014/11/20/初学-HTML-的-30-条最佳实践/</id>
    <published>2014-11-20T06:41:00.000Z</published>
    <updated>2017-10-20T02:38:55.556Z</updated>
    
    <content type="html"><![CDATA[<h3 id="保持标签闭合"><a href="#保持标签闭合" class="headerlink" title="保持标签闭合"></a>保持标签闭合</h3><p>以前，经常见到类似下面的代码（译注：这是多久以前啊……）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Some text here. </div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Some new text here. </div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>You get the idea.</div></pre></td></tr></table></figure><p>注意外面包裹的 UL / OL 标签被遗漏了（谁知是故意还是无意的），而且还忘记了关闭 LI 标签。按今天的标准来看，这是很明显的糟糕做法，应该 100% 避免。总之，保持闭合标签。否则，你验证 html 标签的时候可能遇到问题。</p><p>更好的方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Some text here. <span class="tag">&lt;/<span class="name">li</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Some new text here. <span class="tag">&lt;/<span class="name">li</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>You get the idea. <span class="tag">&lt;/<span class="name">li</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="声明正确的文档类型"><a href="#声明正确的文档类型" class="headerlink" title="声明正确的文档类型"></a>声明正确的文档类型</h3><p><img src="/blog/images/html30/0.png" alt=""></p><p>声明正确的文档类型</p><p>笔者早先曾加入过许多 CSS 论坛，每当用户遇到问题，我们会建议他首先做两件事：</p><ul><li><p>验证 CSS 文件，保证没有错误。</p></li><li><p>确认添加了正确的 doctype</p></li></ul><p>DOCTYPE 出现在HTML标签之前，它告诉浏览器这个页面包含的是 HTML，XHTML，还是两者混合，这样浏览器才能正确解析。</p><p>通常有四种文档类型可供选择：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01//EN' 'http://www.w3.org/TR/html4/strict.dtd'&gt;</span></div><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01 Transitional//EN' 'http://www.w3.org/TR/html4/loose.dtd'&gt;</span></div><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN' 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'&gt;</span></div><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN' 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'&gt;</span></div></pre></td></tr></table></figure><p>关于该使用什么样的文档类型声明，一直有不同的说法。通常认为使用最严格的声明是最佳选择，但研究表明，大部分浏览器会使用普通的方式解析这种声明，所以很多人选择使用 HTML4.01 标准。选择声明的底线是，它是不是真的适合你，所以你要综合考虑来选择适合你得项目的声明。</p><h3 id="永远不要使用内联样式"><a href="#永远不要使用内联样式" class="headerlink" title="永远不要使用内联样式"></a>永远不要使用内联样式</h3><p>当你在埋头写代码时，可能会经常顺手或偷懒的加上一点行内 css 代码，就像这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color: red;"</span>&gt;</span></div><div class="line">    I'm going to make this text red so that it really stands out and makes people take notice! </div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure><p>这样看起来即方便又没有问题。然而，这在你的编码实践中是个错误。</p><p>在你写代码时，在内容结构完成之前最好不要加入样式代码。</p><p>这样的编码方式就像打游击，是一种很山寨的做法。——Chris Coyier</p><p>更好的做法是，完成标签部分后，再把这个P的样式定义在外部样式表文件里。</p><p>建议</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#someElement</span> &gt; <span class="selector-tag">p</span> &#123; <span class="attribute">color</span>: red; &#125;</div></pre></td></tr></table></figure><h3 id="将所有外部css文件放入head标签内"><a href="#将所有外部css文件放入head标签内" class="headerlink" title="将所有外部css文件放入head标签内"></a>将所有外部css文件放入head标签内</h3><p>理论上讲，你可以在任何位置引入 CSS 样式表，但 HTML 规范建议在网页的 head 标记中引入，这样可以加快页面的渲染速度。</p><p>雅虎的开发过程中，我们发现，在 head 标签中引入样式表，会加快网页加载速度，因为这样可以使页面逐步渲染。 —— ySlow 团队</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My Favorites Kinds of Corn<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">media</span>=<span class="string">"screen"</span> <span class="attr">href</span>=<span class="string">"path/to/file.css"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">media</span>=<span class="string">"screen"</span> <span class="attr">href</span>=<span class="string">"path/to/anotherFile.css"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="javascript文件放在底部"><a href="#javascript文件放在底部" class="headerlink" title="javascript文件放在底部"></a>javascript文件放在底部</h3><p><img src="/blog/images/html30/1.png" alt=""></p><p>要记住一个原则，就是让页面以最快的速度呈现在用户面前。当加载一个脚本时，页面会暂停加载，直到脚本完全载入并执行完成。因此会浪费用户更多的时间。</p><p>如果你的JS文件只是要实现某些功能，（比如点击按钮事件），那就放心的在body底部引入它，这绝对是最佳的方法。</p><p>建议</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>And now you know my favorite kinds of corn. <span class="tag">&lt;/<span class="name">p</span>&gt;</span> </div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"path/to/file.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"path/to/anotherFile.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="永远不要使用内联-javascript-。现在不是-1996-年了！"><a href="#永远不要使用内联-javascript-。现在不是-1996-年了！" class="headerlink" title="永远不要使用内联 javascript 。现在不是 1996 年了！"></a>永远不要使用内联 javascript 。现在不是 1996 年了！</h3><p>许多年以前，还存在一种这样的方式，就是直接将 JS 代码加入到 HTML 标签中。尤其是在简单的图片相册中非常常见。本质上讲，一个 “onclick” 事件是附加在 标签上的，其效果等同于一些JS代码。不需要讨论太多，非常不应该使用这样的方式，应该把代码转移到一个外部 JS 文件中，然后使用 “addEventListener / attachEvent” 加入事件监听器。或者使用 <a href="http://www.kuqin.com/book/327879.html" target="_blank" rel="external">jquery</a> 等框架，只需要使用 “click” 方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'a#moreCornInfoLink'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="string">'Want to learn more about corn?'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3 id="边开发，边验证"><a href="#边开发，边验证" class="headerlink" title="边开发，边验证"></a>边开发，边验证</h3><p><img src="/blog/images/html30/2.png" alt=""></p><p>很多人并不真正理解标准验证的意义和价值，笔者在一篇博客中详细分析了这个问题。一句话，验证是为你服务的，不是给你找麻烦的。如果你刚开始从事网页制作，那强烈建议你下载 <a href="https://addons.mozilla.org/en-US/firefox/addon/60" target="_blank" rel="external">Web Developer Toolbar</a>（chrome 用户请自行在应用商店搜索，ie 用户可能就杯具了） ，并在编码过程中随时使用“HTML 标准验证” 和 “CSS 标准验证”。如果你认为 CSS 是一种非常好学的语言，那么它会把你整的死去活来。你不严谨的代码会让你的页面漏洞百出，问题不断，一个好的方法就是—— 验证，验证，再验证。</p><h3 id="下载firebug"><a href="#下载firebug" class="headerlink" title="下载firebug"></a>下载firebug</h3><p><img src="/blog/images/html30/3.png" alt=""></p><p>Firebug 是当之无愧的网页开发最佳插件，它不但可以调试 JavaScript，还可以直观的让你了解页面标记的属性和位置。不用多说，<a href="https://addons.mozilla.org/en-US/firefox/addon/1843" target="_blank" rel="external">下载</a>！</p><h3 id="使用firebug"><a href="#使用firebug" class="headerlink" title="使用firebug"></a>使用firebug</h3><p><img src="/blog/images/html30/4.png" alt=""></p><p>据笔者观察，大部分的使用者仅仅使用了 Firebug 20% 的功能，那真是太浪费了，你不妨花几个小时的时间来系统学习这个工具，相信会让你事半功倍。</p><p>资源：</p><ul><li><a href="http://michaelsync.net/2007/09/08/firebug-tutorial-overview-of-firebug" target="_blank" rel="external">Overview of Firebug</a></li><li><a href="http://www.digitalmediaminute.com/screencast/firebug-js/" target="_blank" rel="external">Debug Javascript With Firebug – video tutorial</a></li></ul><h3 id="保持标签名小写"><a href="#保持标签名小写" class="headerlink" title="保持标签名小写"></a>保持标签名小写</h3><p>理论上讲，html不区分大小写，你可以随意书写，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">DIV</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">P</span>&gt;</span>Here's an interesting fact about corn. <span class="tag">&lt;/<span class="name">P</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">DIV</span>&gt;</span></div></pre></td></tr></table></figure><p>但最好不要这样写，费力气输入大些字母没有任何用处，并且会让代码很难看.</p><p>建议</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Here's an interesting fact about corn. <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="使用-H1-H6-标签"><a href="#使用-H1-H6-标签" class="headerlink" title="使用 H1-H6 标签"></a>使用 H1-H6 标签</h3><p>笔者建议你在网页中使用其中全部六种标记，虽然大部分人只会用到前四个，但使用最多的H会有很多好处，比如设备友好、搜索引擎友好等，不妨把你的P标签都替换成 H6。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is a really important corn fact! <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>Small, but still significant corn fact goes here. <span class="tag">&lt;/<span class="name">h6</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="写博客时，请将H1留给文章标题"><a href="#写博客时，请将H1留给文章标题" class="headerlink" title="写博客时，请将H1留给文章标题"></a>写博客时，请将H1留给文章标题</h3><p><img src="/blog/images/html30/5.jpg" alt=""></p><p>今天笔者在 <a href="http://www.twitter.com/nettuts" target="_blank" rel="external">Twitter</a> 上发起一次讨论：是该把 H1 定义到 LOGO 上还是定义到文章标题上，有 80% 的人选择了后者。</p><p>当然具体如何使用要看你的需求，但我建议你在建立博客的时候，将文章题目定为 H1，这对搜索引擎优化（seo）是非常有好处的。</p><h3 id="下载ySlow"><a href="#下载ySlow" class="headerlink" title="下载ySlow"></a>下载ySlow</h3><p><img src="/blog/images/html30/6.png" alt=""></p><p>在过去几年里，雅虎的团队在前端开发领域做了许多伟大的工作。前不久，它们发布了一个叫 ySlow 的 Firebug 扩展，它会分析你的网页，并返回 一个“成绩单”，上面细致分析了这个网页的方方面面，提出需要改进的地方，虽然它有点苛刻，但它绝对会对你有所帮助，强烈推荐 —— <a href="http://developer.yahoo.com/yslow/" target="_blank" rel="external">ySlow</a>！</p><h3 id="使用无序列表（UL）包裹导航菜单"><a href="#使用无序列表（UL）包裹导航菜单" class="headerlink" title="使用无序列表（UL）包裹导航菜单"></a>使用无序列表（UL）包裹导航菜单</h3><p><img src="/blog/images/html30/7.png" alt=""></p><p>通常网站都会有导航菜单，你可以用这样的方式定义：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"nav"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Home <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>About <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Contact <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>如果你想书写优美的代码，那最好不要用这种方式。</p><p>为什么要用 UL 布局导航菜单？ ——因为UL生来就是为定义列表准备的<br>最好这样定义：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"nav"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Contact<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="学习如何应对-IE"><a href="#学习如何应对-IE" class="headerlink" title="学习如何应对 IE"></a>学习如何应对 IE</h3><p>IE一直以来都是前端开发人员的噩梦！</p><p>如果你的 CSS 样式表基本定型了，那么可以为 IE 单独建立一个样式表，然后这样仅对IE生效：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--[if lt IE 7]&gt;</span></div><div class="line"><span class="comment">    &lt;link rel="stylesheet" type="text/css" media="screen" href="path/to/ie.css" /&gt;</span></div><div class="line"><span class="comment">&lt;![endif]--&gt;</span></div></pre></td></tr></table></figure><p>这些代码的意思是：如果用户浏览器是 IE6 及以下，那这段代码才会生效。如果你想把 IE7 也包含进来，那么就把 “[if lt IE 7]” 改为 “[if lte IE 7]”。</p><h3 id="选择合适的IDE"><a href="#选择合适的IDE" class="headerlink" title="选择合适的IDE"></a>选择合适的IDE</h3><p>不论你是Windows还是Mac用户，这里都有很多优秀的编辑器供你选择：</p><ul><li><p>Mac 用户：<br>– <a href="http://www.panic.com/coda/" target="_blank" rel="external">Coda</a><br>– <a href="http://macrabbit.com/espresso/" target="_blank" rel="external">Espresso</a><br>– <a href="http://www.kuqin.com/book/326184.html" target="_blank" rel="external">TextMate</a><br>– <a href="http://www.aptana.com/" target="_blank" rel="external">Aptana</a><br>– <a href="http://www.adobe.com/products/dreamweaver.html" target="_blank" rel="external">DreamWeaver CS4</a></p></li><li><p>PC 用户：<br>– <a href="http://intype.info/stain.html" target="_blank" rel="external">InType</a><br>– <a href="http://www.e-texteditor.com/" target="_blank" rel="external">E-Text Editor</a><br>– <a href="http://notepad-plus-plus.org/" target="_blank" rel="external">Notepad++</a><br>– <a href="http://www.aptana.com/" target="_blank" rel="external">Aptana</a><br>– <a href="http://www.adobe.com/products/dreamweaver.html" target="_blank" rel="external">Dreamweaver CS4</a></p></li></ul><h3 id="上线前，压缩代码"><a href="#上线前，压缩代码" class="headerlink" title="上线前，压缩代码"></a>上线前，压缩代码</h3><p><img src="/blog/images/html30/8.png" alt=""></p><p>通过压缩您的 CSS 和 Javascript 文件，您可以减少总大小的 25% 左右，但在开发过程中不必压缩，然而，一旦网站完成后，利用一些网络压缩程序或多或少节省一些带宽。下面列出一些工具。</p><ul><li><p>Javascript 压缩服务：<br>– <a href="http://javascriptcompressor.com/" target="_blank" rel="external">Javascript Compressor</a><br>– <a href="http://www.xmlforasp.net/JSCompressor.aspx" target="_blank" rel="external">JS Compressor</a></p></li><li><p>CSS Compression Services：<br>– <a href="http://cssoptimiser.com/" target="_blank" rel="external">CSS Optimiser</a><br>– <a href="http://www.cssdrive.com/index.php/main/csscompressor/" target="_blank" rel="external">CSS Compressor</a><br>– <a href="http://www.cleancss.com/" target="_blank" rel="external">Clean CSS</a></p></li></ul><h3 id="精简，精简，再精简"><a href="#精简，精简，再精简" class="headerlink" title="精简，精简，再精简"></a>精简，精简，再精简</h3><p>回望我们大多数人写的第一个页面，一定会发现严重的 “DIV 癖”( divitis )，通常初学者的本能就是把一个段落用 DIV 包起来，然后为了控制定位而套上更多的 DIV。 —— 其实这是一种低效而有害的做法。</p><blockquote><p>网页写完后，一定要多次回头检查，尽量的减少元素的数量。能用 UL 布局的列表就不要用一个个的 DIV 去布局。</p></blockquote><p>正如写文章的关键是 “缩减，缩减，缩减” 一样，写页面也要遵循这个标准。</p><h3 id="给所有图片加上-“alt”-属性"><a href="#给所有图片加上-“alt”-属性" class="headerlink" title="给所有图片加上 “alt” 属性"></a>给所有图片加上 “alt” 属性</h3><p>为图片加上 alt 属性的好处是不言而喻的 —— 这样可以让禁用图片或者使用特殊设备的用户无障碍得了解你的网页信息，并且对图像搜索引擎友好。</p><p>糟糕的做法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">SRC</span>=<span class="string">"cornImage.jpg"</span> /&gt;</span></div></pre></td></tr></table></figure><p>更好的做法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"cornImage.jpg"</span> <span class="attr">alt</span>=<span class="string">"A corn field I visited."</span> /&gt;</span></div></pre></td></tr></table></figure><h3 id="通宵达旦"><a href="#通宵达旦" class="headerlink" title="通宵达旦"></a>通宵达旦</h3><p>我经常不知不觉的学习工作到凌晨，我认为这是个很好的状况。</p><p>我的 “啊～哈！” 时间（ “AH-HA” moments，指柳暗花明或豁然开朗的时刻）通常都发生在深夜，比如我彻底理解 JavaScript 的 “闭包” 概念，就是在这样一种情况下。如果你还没有感受过这种奇妙的时刻，那就马上试试吧！</p><h3 id="查看源代码"><a href="#查看源代码" class="headerlink" title="查看源代码"></a>查看源代码</h3><p><img src="/blog/images/html30/9.png" alt=""></p><p>没有什么比模仿你的偶像能让你更快的学习HTML。起初，我们都要甘做复印机，然后慢慢得发展自己的风格。研究你喜欢的网站页面代码，看看他们是怎么实现的。这是高手的必经之路，你一定要试一下。注意：只是学习和模仿他们的编码风格，而不是抄袭和照搬！</p><p>留意网络上各种炫酷的 JavaScript 效果，如果看上去是使用了插件，那根据它源码中head标签内的文件名，就可以找到这个插件名称，然后就可以学习它据为己用。</p><h3 id="为所有的元素定义样式"><a href="#为所有的元素定义样式" class="headerlink" title="为所有的元素定义样式"></a>为所有的元素定义样式</h3><p>这一条在你制作其他公司企业网站时尤为必要。你自己不使用 blockquote 标记？那用户可能会用，你自己不使用 OL？用户也可能会。花时间做一个页面，显示出 ul, ol, p, h1-h6, blockquotes, 等等元素的样式，检查一下是否有遗漏。</p><h3 id="使用第三方服务"><a href="#使用第三方服务" class="headerlink" title="使用第三方服务"></a>使用第三方服务</h3><p>现在互联网上流行着许多可以免费加在网页中的API，这些工具非常强大。它可以帮你实现许多巧妙的功能，更重要的是可以帮你宣传网站。</p><h3 id="掌握Photoshop"><a href="#掌握Photoshop" class="headerlink" title="掌握Photoshop"></a>掌握Photoshop</h3><p><img src="/blog/images/html30/10.png" alt=""></p><p>Photoshop 是前端工程师的一个重要工具，如果你已经熟练掌握 HTML 和 CSS ，那不妨多学习一下 Photshop。</p><ol><li>观看 Psdtuts+ 上的<a href="http://design.tutsplus.com/categories/videos" target="_blank" rel="external">视频课程</a>。</li><li>花费每月 25$ 注册成为 <a href="http://www.lynda.com/" target="_blank" rel="external">Lynda.com</a> 的会员，海量精品课程。</li><li>推荐 “<a href="http://www.mydamnchannel.com/You_Suck_at_Photoshop/Season_1/1DistortWarpandLayerEffects_1373" target="_blank" rel="external">You Suck at Photoshop</a>” 系列</li><li>花费几个小时记住尽可能多的 PS 快捷键。</li></ol><h3 id="学习每一个HTML标签"><a href="#学习每一个HTML标签" class="headerlink" title="学习每一个HTML标签"></a>学习每一个HTML标签</h3><p>虽然有些 HTML 标签很少用到，但你依然应该了解他们。比如 “abbr”、“cite” 等，你必须学习它们以备不时之需。</p><p>顺便说下，如果你不熟悉上面两个标签，可以看下下面的解释：</p><ul><li>abbr 和你估计的差不多，它是abbreviation的缩写，“Blvd” 能用 &lt;abbr&gt; 标签包裹，因为他是 “boulevard” 的缩写。</li><li>cite 被用来作为引用内容的标题（blockquote）。例如，如果你在你的博客中引用本篇文章，你可以将 “初学 HTML 的 30 条最佳实践” 用 &lt;cite&gt; 包裹，注意它不应该被用来包裹引用的作者，这是常见的误区。</li></ul><h3 id="参与社区讨论"><a href="#参与社区讨论" class="headerlink" title="参与社区讨论"></a>参与社区讨论</h3><p>网络上有许许多多优秀的资源，而社区中也隐藏着许多高手，这里你既可以自学，也能请教经验丰富的开发者。</p><h3 id="使用-reset-css"><a href="#使用-reset-css" class="headerlink" title="使用 reset.css"></a>使用 reset.css</h3><p>Css Reset 也就 Reset Css，就是重置一些HTML标签样式，或者说默认的样式。</p><p>关于是否应该使用 CSS Reset，网上也有激烈的争论，笔者是建议使用的。你可以先选用一些成熟的 CSS Reset，然后慢慢演变成适合自己的。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-tag">div</span>, <span class="selector-tag">span</span>, <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">p</span>, <span class="selector-tag">blockquote</span>, <span class="selector-tag">pre</span>, <span class="selector-tag">a</span>, <span class="selector-tag">abbr</span>, <span class="selector-tag">acronym</span>, <span class="selector-tag">address</span>, <span class="selector-tag">big</span>, <span class="selector-tag">cite</span>, <span class="selector-tag">code</span>, <span class="selector-tag">img</span>, <span class="selector-tag">ins</span>, <span class="selector-tag">kbd</span>, <span class="selector-tag">q</span>, <span class="selector-tag">s</span>, <span class="selector-tag">samp</span>, <span class="selector-tag">small</span>, <span class="selector-tag">strike</span>, <span class="selector-tag">strong</span>, <span class="selector-tag">dl</span>, <span class="selector-tag">dt</span>, <span class="selector-tag">dd</span>, <span class="selector-tag">ol</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">li</span>, <span class="selector-tag">fieldset</span>, <span class="selector-tag">form</span>, <span class="selector-tag">label</span>, <span class="selector-tag">legend</span>, <span class="selector-tag">table</span>, <span class="selector-tag">caption</span>, <span class="selector-tag">tbody</span>, <span class="selector-tag">tfoot</span>, <span class="selector-tag">thead</span>, <span class="selector-tag">tr</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123; </div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span>; </div><div class="line">    <span class="attribute">padding</span>: <span class="number">0</span>; </div><div class="line">    <span class="attribute">border</span>: <span class="number">0</span>; </div><div class="line">    <span class="attribute">outline</span>: <span class="number">0</span>; </div><div class="line">    <span class="attribute">font-size</span>: <span class="number">100%</span>; </div><div class="line">    <span class="attribute">vertical-align</span>: baseline; </div><div class="line">    <span class="attribute">background</span>: transparent; </div><div class="line">&#125; </div><div class="line"><span class="selector-tag">body</span> &#123; </div><div class="line">    <span class="attribute">line-height</span>: <span class="number">1</span>; </div><div class="line">&#125; </div><div class="line"><span class="selector-tag">ol</span>, <span class="selector-tag">ul</span> &#123; </div><div class="line">    <span class="attribute">list-style</span>: none; </div><div class="line">&#125; </div><div class="line"><span class="selector-tag">blockquote</span>, <span class="selector-tag">q</span> &#123; </div><div class="line">    <span class="attribute">quotes</span>: none; </div><div class="line">&#125; </div><div class="line"><span class="selector-tag">blockquote</span><span class="selector-pseudo">:before</span>, </div><div class="line"><span class="selector-tag">blockquote</span><span class="selector-pseudo">:after</span>, </div><div class="line"><span class="selector-tag">q</span><span class="selector-pseudo">:before</span>, </div><div class="line"><span class="selector-tag">q</span><span class="selector-pseudo">:after</span> &#123; </div><div class="line">    <span class="attribute">content</span>: <span class="string">''</span>; </div><div class="line">    <span class="attribute">content</span>: none; </div><div class="line">&#125; </div><div class="line"><span class="selector-tag">table</span> &#123; </div><div class="line">    <span class="attribute">border-collapse</span>: collapse; </div><div class="line">    <span class="attribute">border-spacing</span>: <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="对齐元素"><a href="#对齐元素" class="headerlink" title="对齐元素"></a>对齐元素</h3><p><img src="/blog/images/html30/11.png" alt=""></p><p>简单来说，你应该尽可能的对齐你的网页元素。可以观察一下你喜欢的网站，它们的LOGO、标题、图表、段落肯定是对得非常整齐的。否则就会显得混乱和不专业。</p><h3 id="关于PSD切片"><a href="#关于PSD切片" class="headerlink" title="关于PSD切片"></a>关于PSD切片</h3><p><img src="/blog/images/html30/12.jpg" alt=""></p><p>现在你已经掌握了HTML、CSS、Photoshop知识，那么你还需要学习如何把PSD转换为网页上的图片和背景，下面有两个不错的教程：</p><ul><li><a href="http://code.tutsplus.com/" target="_blank" rel="external">Slice and Dice that PSD</a></li><li><a href="http://code.tutsplus.com/" target="_blank" rel="external">From PSD to HTML/CSS</a></li></ul><h3 id="不要随意使用框架"><a href="#不要随意使用框架" class="headerlink" title="不要随意使用框架"></a>不要随意使用框架</h3><p>Javascript 和 CSS 都有许多优秀的框架，但如果你是初学者，不要急于使用它们。如果你还没能熟练的驾驭 CSS，使用框架会混淆你的知识体系。尽管你可能能会说 javascript 和 jQuery 是可以同时学习的，但这对 css 并不适合。我个人提倡 960 CSS 网格框架（英文网站），并且我经常使用它。还是那句话，如果你是 css 的初学者，学习框架只会让你更加困惑。</p><p>CSS 框架是为熟练开发者设计的，这样会节省它们大量的时间。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;保持标签闭合&quot;&gt;&lt;a href=&quot;#保持标签闭合&quot; class=&quot;headerlink&quot; title=&quot;保持标签闭合&quot;&gt;&lt;/a&gt;保持标签闭合&lt;/h3&gt;&lt;p&gt;以前，经常见到类似下面的代码（译注：这是多久以前啊……）：&lt;/p&gt;
&lt;figure class=&quot;highl
      
    
    </summary>
    
      <category term="HTML" scheme="http://www.xieyangogo.cn/categories/HTML/"/>
    
    
      <category term="HTML" scheme="http://www.xieyangogo.cn/tags/HTML/"/>
    
      <category term="效率" scheme="http://www.xieyangogo.cn/tags/%E6%95%88%E7%8E%87/"/>
    
      <category term="入门" scheme="http://www.xieyangogo.cn/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>初学 javascript 的 24 条最佳实践</title>
    <link href="http://www.xieyangogo.cn/2014/11/20/%E5%88%9D%E5%AD%A6-javascript-%E7%9A%84-24-%E6%9D%A1%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <id>http://www.xieyangogo.cn/2014/11/20/初学-javascript-的-24-条最佳实践/</id>
    <published>2014-11-20T03:50:00.000Z</published>
    <updated>2017-10-20T02:38:55.571Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>注：本文多次用到 Firebug 的 console 对象，请参考 <a href="http://getfirebug.com/console.html" target="_blank" rel="external">Firebug Console API</a>。关于 Firebug 的更详细介绍，请猛击这里。</p></blockquote><h3 id="使用-“-”-代替-“-”"><a href="#使用-“-”-代替-“-”" class="headerlink" title="使用 “===” 代替 “==”"></a>使用 “===” 代替 “==”</h3><p>JavaScript 里有两种不同的相等运算符：=== | !== 和 == | != 。相比之下，前者更值得推荐。请尽量使用前者。</p><blockquote><p>“如果两边的操作数具有相同的类型和值，=== 返回true，!== 返回 false。” —— JavaScript语言精粹</p></blockquote><p>&ensp;<br>不过，如果使用 == 和 != ，在操作不同数据类型时, 你可能会遇到一些意想不到的问题。在进行相等判断前，JavaScript 会试图将它们转换为字符串、数字或 Boolean 量。</p><h3 id="Eval-Bad（避免使用eval函数，参考）"><a href="#Eval-Bad（避免使用eval函数，参考）" class="headerlink" title="Eval = Bad（避免使用eval函数，参考）"></a>Eval = Bad（避免使用eval函数，<a href="http://www.w3school.com.cn/js/jsref_eval.asp" target="_blank" rel="external">参考</a>）</h3><p>起初不太熟悉时，“eval” 让我们能够访问 JavaScript 的编译器（译注：这看起来很强大）。从本质上讲,我们可以将字符串传递给 eval 作为参数，把字符串作为 javascript 代码执行，返回结果。</p><p>这不仅大幅降低脚本的性能（译注：JIT 编译器无法预知字符串内容，而无法预编译和优化），而且这也会带来巨大的安全风险，因为这样付给要执行的文本太高的权限，千万别用！</p><h3 id="省略未必省事"><a href="#省略未必省事" class="headerlink" title="省略未必省事"></a>省略未必省事</h3><p>从技术上讲，你可以省略大多数花括号和分号。大多数浏览器都能正确理解下面的代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (someVariableExists)</div><div class="line">    x = <span class="literal">false</span></div></pre></td></tr></table></figure><p>然后，如果像下面这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (someVariableExists)</div><div class="line">    x = <span class="literal">false</span> anotherFunctionCall();</div></pre></td></tr></table></figure><p>有人可能会认为上面的代码等价于下面这样:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (someVariableExists) &#123;</div><div class="line">    x = <span class="literal">false</span>;</div><div class="line">    anotherFunctionCall();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>不幸的是，这种理解是错误的。实际上的意思如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (someVariableExists) &#123;</div><div class="line">    x = <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line">anotherFunctionCall();</div></pre></td></tr></table></figure><p>你可能注意到了，上面的缩进容易给人花括号的假象。无可非议，这是一种可怕的实践，应不惜一切代价避免。仅有一种情况下，即只有一行的时候，花括号是可以省略的，但这点也是饱受争议的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="number">2</span> + <span class="number">2</span> === <span class="number">4</span>) <span class="keyword">return</span> <span class="string">'nicely done'</span>;</div></pre></td></tr></table></figure><blockquote><p>建议：</p><p>很可能，有一天你需要在 if 语句块中添加更多的语句。这样的话，你必须重写这段代码。底线——省略是雷区。到底还得加上。</p></blockquote><p>&ensp;</p><h3 id="使用JSLint"><a href="#使用JSLint" class="headerlink" title="使用JSLint"></a>使用JSLint</h3><p><a href="http://www.jslint.com/" target="_blank" rel="external">JSLint</a> 是由大名鼎鼎的<a href="http://www.crockford.com/" target="_blank" rel="external">道格拉斯</a>（Douglas Crockford）编写的调试器。简单的将你的代码粘贴进JSLint中，它会迅速找出代码中明显的问题和错误。</p><blockquote><p>“JSLint扫面输入的源代码。如果发现一个问题，它返回一条描述问题和一个代码中的所在位置的消息。问题并不一定是语法错误，尽管通常是这样。JSLint还会查看一些编码风格和程序结构问题。这并不能保证你的程序是正确的。它只是提供了另一双帮助发现问题的眼睛。” ——JSLing 文档</p></blockquote><p>&ensp;<br>部署脚本之前，运行JSLint，只是为了确保你没有做出任何愚蠢的错误。</p><h3 id="将脚本放在页面的底部"><a href="#将脚本放在页面的底部" class="headerlink" title="将脚本放在页面的底部"></a>将脚本放在页面的底部</h3><p>在本系列前面的文章里已经提到过这个技巧，我粘贴信息在这里。</p><p><img src="/blog/images/html30/1.png" alt=""></p><p>请记住 —— 我们要千方百计保证客户端的页面载入速度尽可能的快。而脚本没载入完成，浏览器就没法加载页面的剩余部分。</p><p>如果你的JS文件只是添加一些额外功能 —— 例如，为点击某链接绑定事件——那大可以等页面加载基本完成后再做。把JS文件放到页面最后，body的结束标签之前，这样做最好了。</p><p>建议</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>And now you know my favorite kinds of corn. <span class="tag">&lt;/<span class="name">p</span>&gt;</span> </div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"path/to/file.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"path/to/anotherFile.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="避免在For语句内声明变量"><a href="#避免在For语句内声明变量" class="headerlink" title="避免在For语句内声明变量"></a>避免在For语句内声明变量</h3><p>当需要执行冗长的for语句时，不要让JavaScript引擎每次都重复那些没有必要的操作。例如：</p><p>糟糕</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; someArray.length; i++) &#123;</div><div class="line">    <span class="keyword">var</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>);</div><div class="line">    container.innerHtml += <span class="string">'my number: '</span> + i;</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这段代码每次都重新定义数组长度，每次都在遍历DOM寻找container元素 —— 太傻了！</p><p>建议</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = someArray.length; i &lt; len; i++) &#123;</div><div class="line">    container.innerHtml += <span class="string">'my number: '</span> + i;</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="构建字符串的最优方法"><a href="#构建字符串的最优方法" class="headerlink" title="构建字符串的最优方法"></a>构建字符串的最优方法</h3><p>当你需要遍历数组或对象的时候，不要总想着 “for” 语句，要有创造性，总能找到更好的办法，例如，像下面这样。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'item 1'</span>, <span class="string">'item 2'</span>, <span class="string">'item 3'</span>, ...];</div><div class="line"><span class="keyword">var</span> list = <span class="string">'&lt;ul&gt;&lt;li&gt;'</span> + arr.join(<span class="string">'&lt;/li&gt;&lt;li&gt;'</span>) + <span class="string">'&lt;/li&gt;&lt;/ul&gt;'</span>;</div></pre></td></tr></table></figure><p><strong>我不是你心中神，但请你相信我（不信你自己测试） —— 这是迄今为止最快的方法！</strong></p><p>使用原生代码（如 join()），不管系统内部做了什么，通常比非原生快很多。 —— James Padolsey, james.padolsey.com</p><h3 id="减少全局变量"><a href="#减少全局变量" class="headerlink" title="减少全局变量"></a>减少全局变量</h3><p>只要把多个全局变量都整理在一个名称空间下，将显著降低与其他应用程序、组件或类库之间产生糟糕的相互影响的可能性。 —— Douglas Crockford</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">'Jeffrey'</span>;</div><div class="line"><span class="keyword">var</span> lastName = <span class="string">'Way'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;...&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(name); <span class="comment">// Jeffrey -- 或 window.name</span></div></pre></td></tr></table></figure><p>更好的做法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> DudeNameSpace = &#123;</div><div class="line">    name: <span class="string">'Jeffrey'</span>,</div><div class="line">    lastName: <span class="string">'Way'</span>,</div><div class="line">    doSomething: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;...&#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(DudeNameSpace.name); <span class="comment">// Jeffrey</span></div></pre></td></tr></table></figure><blockquote><p>注：这里只是简单命名为 “DudeNameSpace”，实际当中要取更合理的名字。</p></blockquote><p>&ensp;</p><h3 id="给代码添加注释"><a href="#给代码添加注释" class="headerlink" title="给代码添加注释"></a>给代码添加注释</h3><p>可能一开始你会觉得并无必要，但相信我，你将来会主动想要尽可能写好代码的注释的。当你几个月后再回看某项目时，结果却发现很难想起当时写某句东西时脑子在想的什么了，是不是很让人沮丧呢？或者，如果有同事要修订你的代码呢？一定，一定要为你代码里的重要部分加上注释。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 循环数组，输出每项名字（译者注：这样的注释似乎有点多余吧）</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = array.length; i &lt; len; i++) &#123;</div><div class="line">    <span class="built_in">console</span>.log(array[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="试试渐进增强"><a href="#试试渐进增强" class="headerlink" title="试试渐进增强"></a>试试渐进增强</h3><p>一定要记得为未启用 JavaScript 的情况提供替代方案。大家可能会认为，“大部分我的访客都启用了JavaScript的，我才不用担心”。这样的话，你可就大错特错了！</p><p>你有没有试过看看禁用JavaScript后你那漂亮的滑动器都成啥样了？（你可以下载 <a href="https://addons.mozilla.org/en-US/firefox/addon/60" target="_blank" rel="external">Web Developer ToolBar</a> 轻松完成这项任务。）禁用之后你的网站可能就彻底失去了可用性！经验之谈：开发初期总是按照没有JavaScript来设计你的网站，之后再进行渐进地功能增强，小心翼翼地改变你地布局。</p><h3 id="不要给-“setInterval”-或-“setTimeout”-传递字符串参数"><a href="#不要给-“setInterval”-或-“setTimeout”-传递字符串参数" class="headerlink" title="不要给 “setInterval” 或 “setTimeout” 传递字符串参数"></a>不要给 “setInterval” 或 “setTimeout” 传递字符串参数</h3><p>考虑下面的代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setInterval(<span class="string">"document.getElementById('container').innerHTML += 'My new number: ' + i"</span>, <span class="number">3000</span>);</div></pre></td></tr></table></figure><p>不仅执行不高效，而且和 eval 函数有着同样的高风险。千万不要把字串传递给 setInterval 和 setTimeout。恰当的做法是，传递一个函数名：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setInterval(someFunction, <span class="number">3000</span>);</div></pre></td></tr></table></figure><h3 id="不要使用-“with”-语句"><a href="#不要使用-“with”-语句" class="headerlink" title="不要使用 “with” 语句"></a>不要使用 “with” 语句</h3><p>初识之下，“with” 语句似乎还挺好用的，它用于设置代码在特定对象中的作用域。其基本用法是提供深入到对象中处理元素的快速写法。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> (being.person.man.bodyparts) &#123;</div><div class="line">    arms = <span class="literal">true</span>;</div><div class="line">    legs = <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>而不是像下面这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">being.person.man.bodyparts.arms = <span class="literal">true</span>;</div><div class="line">being.person.man.bodyparts.legs = <span class="literal">true</span>;</div></pre></td></tr></table></figure><p>不幸的是，测试表明，若你要为对象插入新成员，with的表现非常糟糕，它的执行速度非常缓慢。替代方案是声明一个变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = being.person.man.bodyparts;</div><div class="line">o.arms = <span class="literal">true</span>;</div><div class="line">o.legs = <span class="literal">true</span>;</div></pre></td></tr></table></figure><h3 id="使用-代替-new-Ojbect"><a href="#使用-代替-new-Ojbect" class="headerlink" title="使用 {} 代替 new Ojbect()"></a>使用 {} 代替 new Ojbect()</h3><p>在JavaScript有多种方式能新建对象，最传统的方法是 new 语句，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">o.name = <span class="string">'Jeffrey'</span>;</div><div class="line">o.lastName = <span class="string">'Way'</span>;</div><div class="line">o.someFunction = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>不过，这一方法读起来却比较糟糕。我强烈建议你采用下面这种在文字样式上更为强健的写法：</p><p>更好的做法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = &#123;</div><div class="line">    name: <span class="string">'Jeffrey'</span>,</div><div class="line">    lastName: <span class="string">'Way'</span>,</div><div class="line">    someFunction: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>注意，如果你只是想创建一个空对象，{} 更好。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = &#123;&#125;;</div></pre></td></tr></table></figure><p>“对象字面量使我们能够编写更具特色的代码，而且相对简单的多。不需要直接调用构造函数或维持传递给函数的参数的正确顺序，等” —— dyn-web.com</p><h3 id="使用-代替-new-Array"><a href="#使用-代替-new-Array" class="headerlink" title="使用 [] 代替 new Array()"></a>使用 [] 代替 new Array()</h3><p>这同样适用于创建一个新的数组。</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">a[<span class="number">0</span>] = <span class="string">"Joe"</span>;</div><div class="line">a[<span class="number">1</span>] = <span class="string">'Plumber'</span>;</div></pre></td></tr></table></figure><p>更好的做法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="string">'Joe'</span>, <span class="string">'Plumber'</span>];</div></pre></td></tr></table></figure><p>“javascript 程序中常见的错误是在需要对象的时候使用数组，而需要数组的时候却使用对象。规则很简单：当属性名是连续的整数时，你应该使用数组。否则，请使用对象” —— Douglas Crockford</p><h3 id="定义多个变量时，省略-var-关键字，用逗号代替"><a href="#定义多个变量时，省略-var-关键字，用逗号代替" class="headerlink" title="定义多个变量时，省略 var 关键字，用逗号代替"></a>定义多个变量时，省略 var 关键字，用逗号代替</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> someItem = <span class="string">'some string'</span>; </div><div class="line"><span class="keyword">var</span> anotherItem = <span class="string">'another string'</span>; </div><div class="line"><span class="keyword">var</span> oneMoreItem = <span class="string">'one more string'</span>;</div></pre></td></tr></table></figure><p>更好的做法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> someItem = <span class="string">'some string'</span>, </div><div class="line">    anotherItem = <span class="string">'another string'</span>, </div><div class="line">    oneMoreItem = <span class="string">'one more string'</span>;</div></pre></td></tr></table></figure><p>…不言自明。我不知道这样做能否提升代码执行速度，但是确实让你的代码干净许多。</p><h3 id="谨记，不要省略分号"><a href="#谨记，不要省略分号" class="headerlink" title="谨记，不要省略分号"></a>谨记，不要省略分号</h3><p>从技术上讲，大多数浏览器允许你省略分号。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> someItem = <span class="string">'some string'</span> <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123; </div><div class="line">    <span class="keyword">return</span> <span class="string">'something'</span> </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>之前已经说过，这样做会造成潜在的更大、更难以发现的问题：</p><p>更好的做法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> someItem = <span class="string">'some string'</span>; <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123; </div><div class="line">    <span class="keyword">return</span> <span class="string">'something'</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="“For-in”-语句"><a href="#“For-in”-语句" class="headerlink" title="“For in” 语句"></a>“For in” 语句</h3><p>遍历对象时，你可能会发现你还需要获取方法函数。所以遇到这种情况时，请一定记得给你的代码包一层 if 语句，用以过滤信息。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (key <span class="keyword">in</span> object) &#123;</div><div class="line">    <span class="keyword">if</span> (object.hasOwnProperty(key)) &#123;</div><div class="line">        ...</div><div class="line">        then</div><div class="line">        <span class="keyword">do</span> something...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>参考 JavaScript：语言精粹，道格拉斯（Douglas Crockford）。</p></blockquote><p>&ensp;</p><h3 id="使用-Firebug-的-“timer”-功能优化你的代码"><a href="#使用-Firebug-的-“timer”-功能优化你的代码" class="headerlink" title="使用 Firebug 的 “timer” 功能优化你的代码"></a>使用 Firebug 的 “timer” 功能优化你的代码</h3><p>想要轻松地快速了解某项操作的用时吗？使用Firebug的timer功能来记录结果好了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">TimeTracker</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.time(<span class="string">"MyTimer"</span>);</div><div class="line">    <span class="keyword">for</span> (x = <span class="number">5000</span>; x &gt; <span class="number">0</span>; x--) &#123;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.timeEnd(<span class="string">"MyTimer"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="阅读，阅读，反复阅读"><a href="#阅读，阅读，反复阅读" class="headerlink" title="阅读，阅读，反复阅读"></a>阅读，阅读，反复阅读</h3><p>虽然我是 Web 开发博客（就像这个！）的超级粉丝，但吃饭和睡觉前除了看书好像也别无选择~ 在你的床头柜上摆一本 Web 开发的好书吧！下列书单都是我的最爱：</p><p><a href="http://www.packtpub.com/object-oriented-javascript-applications-libraries/book" target="_blank" rel="external">Object-Oriented JavaScript</a>（<a href="http://s.click.taobao.com/t?e=m%3D2%26s%3DRTedFwhY5ykcQipKwQzePOeEDrYVVa64K7Vc7tFgwiFRAdhuF14FMeupzlnrjcvD1aH1Hk3GeOiLbAnOMKhNmUKQIyb6a3ytbepvpTpVkkGwOnkIiEYnhxRRelJrXu3g" target="_blank" rel="external">JavaScript面向对象编程指南</a> <a href="http://ishare.iask.sina.com.cn/f/18963277.html" target="_blank" rel="external">pdf</a>）<br><a href="http://oreilly.com/catalog/9780596517748/" target="_blank" rel="external">JavaScript：The Good Parts</a>（<a href="http://s.click.taobao.com/t?e=m%3D2%26s%3DR57sZUeY%2Bd8cQipKwQzePOeEDrYVVa64K7Vc7tFgwiFRAdhuF14FMTkkQUThmjGRt4hWD5k2kjOLbAnOMKhNmUKQIyb6a3ytQ3ve%2Fl8eVw5iZOsdwOXcw9FIO2YfYLJG" target="_blank" rel="external">JavaScript语言精粹 修订版</a> <a href="http://pan.baidu.com/share/link?shareid=381250&amp;uk=4043705155&amp;fid=1352735570" target="_blank" rel="external">pdf</a>）<br><a href="http://net.tutsplus.com/tutorials/JavaScript-ajax/24-JavaScript-best-practices-for-beginners/www.packtpub.com/learning-jquery-1.3/boo" target="_blank" rel="external">Learning jQuery 1.3</a>（<a href="http://s.click.taobao.com/t?e=m%3D2%26s%3D4OykraCsZmQcQipKwQzePOeEDrYVVa64LKpWJ%2Bin0XJRAdhuF14FMbOLn3WkI14k1aH1Hk3GeOiLbAnOMKhNmUKQIyb6a3ytlvVWKrpGG8BlboWVDkT64ko1h03ocqnd" target="_blank" rel="external">jQuery基础教程 第4版</a> <a href="http://download.csdn.net/detail/wang5yong1fei5/4631965" target="_blank" rel="external">pdf</a>）<br><a href="http://oreilly.com/catalog/9780596527464/" target="_blank" rel="external">Learning JavaScript</a>（<a href="http://s.click.taobao.com/t?e=m%3D2%26s%3DrfLwyl5bYj0cQipKwQzePOeEDrYVVa64K7Vc7tFgwiFRAdhuF14FMXFrLRwCQreut4hWD5k2kjOLbAnOMKhNmUKQIyb6a3ytK49eyT2J3GnLe30VI4uWF7UMVP8sn%2BEI" target="_blank" rel="external">JavaScript学习指南</a> <a href="http://pan.baidu.com/share/link?shareid=180605&amp;uk=839021066&amp;fid=1732362737" target="_blank" rel="external">pdf</a>）</p><p>读了他们……多次。我仍将继续!</p><h3 id="自执行函数"><a href="#自执行函数" class="headerlink" title="自执行函数"></a>自执行函数</h3><p>相比于调用函数，让函数在页面载入或者某一父函数被调用时自动执行，是十分简单方便的做法。你只需要把你的函数包在父辈之内，然后添上一个额外的括号，本质上这括号就触发了你定义的函数（<a href="http://20032334.javaeye.com/blog/288989" target="_blank" rel="external">了解更多</a>）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        name: <span class="string">'jeff'</span>,</div><div class="line">        lastName: <span class="string">'way'</span></div><div class="line">    &#125;;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure><h3 id="原生代码永远比库快"><a href="#原生代码永远比库快" class="headerlink" title="原生代码永远比库快"></a>原生代码永远比库快</h3><p>诸如 jQuery 和 Mootools 这样的 JavaScript 库，能为你写代码的过程省下不少时间——尤其是当需要 AJAX 操作时。不过你可得记住，只要你的代码写得恰当，原生 JavaScript 总是会比利用代码库的写法执行得快一些。</p><p>jQuery 的 “each” 方法对于循环操作十分便利，但是使用原生态的for语句总归会快很多。</p><h3 id="Crockford（道格拉斯）的-JSON-Parse"><a href="#Crockford（道格拉斯）的-JSON-Parse" class="headerlink" title="Crockford（道格拉斯）的 JSON.Parse"></a>Crockford（道格拉斯）的 JSON.Parse</h3><p>尽管 JavaScript 2 会内建 JSON 处理器，但写这篇文章之时，我们还是需要自己实现。Douglas Crockford，JSON 的创建者，已经为我们创作出能直接使用的处理器了。<a href="http://www.json.org/" target="_blank" rel="external">查看相关信息</a>。</p><p>导入这段代码，你就能新建 JSON 全局对象，然后处理你的 .json 文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> response = <span class="built_in">JSON</span>.parse(xhr.responseText);</div><div class="line"><span class="keyword">var</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = response.length; i &lt; len; i++) &#123;</div><div class="line">    container.innerHTML += <span class="string">'&lt;li&gt;'</span> + response[i].name + <span class="string">' : '</span> + response[i].email + <span class="string">'&lt;/li&gt;'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="移除-“language”-属性"><a href="#移除-“language”-属性" class="headerlink" title="移除 “language” 属性"></a>移除 “language” 属性</h3><p>很多年前，language还是每段script标签必备属性：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">language</span>=<span class="string">"javascript"</span>&gt;</span><span class="undefined"> </span></div><div class="line"><span class="undefined">    ... </span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>然而，这个属性早已被弃用，所以请移除（译者注：html5 中已废弃，但如果你喜欢，你仍然可以添加）。</p><blockquote><p>本文为翻译文章，原文为“<a href="http://net.tutsplus.com/tutorials/JavaScript-ajax/24-JavaScript-best-practices-for-beginners/" target="_blank" rel="external">24 JavaScript Best Practices for Beginners</a>”，2009年</p></blockquote><p>关于#20 的补充，下面是译者认为的一些好书，有兴趣的读者可以留言讨论</p><ol><li>javascript模式（和上面JavaScript面向对象编程指南同一作者，这本书更好）</li><li>javascript设计模式</li><li>编写可维护的javascript（尼古拉斯新书）</li><li>高性能javascript（尼古拉斯 已绝版）</li><li>javascript语言精髓与编程实践</li><li>javascript高级程序设计（尼古拉斯）</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;注：本文多次用到 Firebug 的 console 对象，请参考 &lt;a href=&quot;http://getfirebug.com/console.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Firebug Consol
      
    
    </summary>
    
      <category term="javascript" scheme="http://www.xieyangogo.cn/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://www.xieyangogo.cn/tags/javascript/"/>
    
      <category term="效率" scheme="http://www.xieyangogo.cn/tags/%E6%95%88%E7%8E%87/"/>
    
      <category term="入门" scheme="http://www.xieyangogo.cn/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>jQuery 事件</title>
    <link href="http://www.xieyangogo.cn/2014/06/23/jQuery-%E4%BA%8B%E4%BB%B6/"/>
    <id>http://www.xieyangogo.cn/2014/06/23/jQuery-事件/</id>
    <published>2014-06-23T05:16:56.000Z</published>
    <updated>2017-10-20T02:38:55.556Z</updated>
    
    <content type="html"><![CDATA[<h3 id="移除事件"><a href="#移除事件" class="headerlink" title="移除事件"></a>移除事件</h3><p>unbind(type [, data]), data 是要移除的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#btn'</span>).unbind(<span class="string">"click"</span>);    <span class="comment">//移除click</span></div><div class="line">$(<span class="string">'#btn'</span>).unbind();    <span class="comment">//移除所有</span></div></pre></td></tr></table></figure><p>对于只需要触发一次的，随后就要立即解除绑定的情况，用one()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#btn'</span>).one(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </div><div class="line">    ...</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3 id="模拟操作"><a href="#模拟操作" class="headerlink" title="模拟操作"></a>模拟操作</h3><p>可以用 trigger() 方法完成模拟操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#btn'</span>).trigger(<span class="string">"click"</span>); </div><div class="line">$(<span class="string">'#btn'</span>).click();</div></pre></td></tr></table></figure><h3 id="触发自定义事件"><a href="#触发自定义事件" class="headerlink" title="触发自定义事件"></a>触发自定义事件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#btn'</span>).bind(<span class="string">"myclick"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    ...</div><div class="line">&#125;);</div><div class="line"></div><div class="line">$(<span class="string">'#btn'</span>).trigger(<span class="string">"myclick"</span>);</div></pre></td></tr></table></figure><h3 id="传递数据"><a href="#传递数据" class="headerlink" title="传递数据"></a>传递数据</h3><p>trigger(type [, data]);</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#btn'</span>).bind(<span class="string">"myclick"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event, message1, message2</span>) </span>&#123;</div><div class="line">    ...</div><div class="line">&#125;);</div><div class="line"></div><div class="line">$(<span class="string">'#btn'</span>).trigger(<span class="string">"myclick"</span>, [<span class="string">"传给message1"</span>, <span class="string">"传给message2"</span>]);</div></pre></td></tr></table></figure><h3 id="执行默认操作"><a href="#执行默认操作" class="headerlink" title="执行默认操作"></a>执行默认操作</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"input"</span>).trigger(<span class="string">"focus"</span>);       <span class="comment">//不仅会触发input元素绑定的focus事件，还会触发默认操作——得到焦点。</span></div><div class="line"></div><div class="line">$(<span class="string">"input"</span>).triggerHandler(<span class="string">"focus"</span>);      <span class="comment">//只触发绑定事件，不执行浏览器默认操作</span></div></pre></td></tr></table></figure><h3 id="其他用法"><a href="#其他用法" class="headerlink" title="其他用法"></a>其他用法</h3><h4 id="绑定多个事件类型"><a href="#绑定多个事件类型" class="headerlink" title="绑定多个事件类型"></a>绑定多个事件类型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"div"</span>).bind(<span class="string">"mouseover mouseout"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    ...</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h4 id="添加事件命名空间"><a href="#添加事件命名空间" class="headerlink" title="添加事件命名空间"></a>添加事件命名空间</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"div"</span>).bind(<span class="string">"click.plugin"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    ...</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>在所绑定的事件类型后面添加命名空间，这样在删除事件时只需要指定命名空间即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"div"</span>).unbind(<span class="string">".plugin"</span>);   <span class="comment">//删除空间内的事件</span></div><div class="line"></div><div class="line">$(<span class="string">"div"</span>).trigger(<span class="string">"click!"</span>);    <span class="comment">//触发所有不包含在命名空间中的click方法</span></div></pre></td></tr></table></figure><p>如果包含在命名空间的也要触发：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"div"</span>).trigger(<span class="string">"click"</span>);</div></pre></td></tr></table></figure><h3 id="另外摘录"><a href="#另外摘录" class="headerlink" title="另外摘录"></a>另外摘录</h3><p>===</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'div'</span>).bind(<span class="string">'click'</span>, RecommandProduct);   <span class="comment">//为div绑定RecommandProduct 函数</span></div><div class="line">$(<span class="string">'div'</span>).unbind(<span class="string">'click'</span>, RecommandProduct);   <span class="comment">//取消RecommandProduct 函数</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;移除事件&quot;&gt;&lt;a href=&quot;#移除事件&quot; class=&quot;headerlink&quot; title=&quot;移除事件&quot;&gt;&lt;/a&gt;移除事件&lt;/h3&gt;&lt;p&gt;unbind(type [, data]), data 是要移除的函数&lt;/p&gt;
&lt;figure class=&quot;highlig
      
    
    </summary>
    
      <category term="jQuery" scheme="http://www.xieyangogo.cn/categories/jQuery/"/>
    
    
      <category term="jQuery" scheme="http://www.xieyangogo.cn/tags/jQuery/"/>
    
      <category term="事件" scheme="http://www.xieyangogo.cn/tags/%E4%BA%8B%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>canvas画饼图</title>
    <link href="http://www.xieyangogo.cn/2013/08/28/canvas%E7%94%BB%E9%A5%BC%E5%9B%BE/"/>
    <id>http://www.xieyangogo.cn/2013/08/28/canvas画饼图/</id>
    <published>2013-08-28T09:36:44.000Z</published>
    <updated>2017-10-20T02:38:55.556Z</updated>
    
    <content type="html"><![CDATA[<p>不得不说，HTML5与CSS3的推出，将推翻老一代的网页制作者。特别在当今浏览器标准不断统一的情况下，新生的网页制作者几乎想不到在过去的时间里制作网页调兼容性是一件非常痛苦的事。</p><p>过去我们要实现圆角只能切图，如今在CSS3里只需一条代码搞定。而CSS3的功能远不止这些，配合HTML5还能画饼图数据分析。</p><p>然而，HTML5与CSS3严格意义上不具备编程语言的思想，所以还要借助JS去“画”它。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"bingtu"</span>  <span class="attr">width</span>=<span class="string">"224"</span> <span class="attr">height</span>=<span class="string">"130"</span> &gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> color = [<span class="string">"#999999"</span>, <span class="string">"#333333"</span>, <span class="string">"#336799"</span>]; <span class="comment">// 画饼图所用的颜色</span></div><div class="line"><span class="keyword">var</span> data = [<span class="number">25</span>, <span class="number">35</span>, <span class="number">50</span>];  <span class="comment">// 数据比，全部是数据加起来是100，才能画满整个圆</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawCircle</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"bingtu"</span>);</div><div class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);   <span class="comment">// 画2D平面图</span></div><div class="line">    <span class="keyword">var</span> startPoint = <span class="number">1.5</span> * <span class="built_in">Math</span>.PI;   <span class="comment">// 绘制方向起点，有逆顺之分，通常是 1.5*Math.PI 或者 0</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</div><div class="line">        ctx.fillStyle = color[i];  <span class="comment">// 填充颜色</span></div><div class="line">        ctx.strokeStyle = color[i];</div><div class="line">        ctx.beginPath();  <span class="comment">// 开始画</span></div><div class="line">        ctx.moveTo(<span class="number">112</span>, <span class="number">65</span>);  <span class="comment">//每次回到圆心，第一个值 112 是 canvas 宽的一半， 65是 canvas 高的一半。其实也可以利用js获取对象的宽高算出来就好，省该canvas宽高后还要去调整JS代码中的参数。</span></div><div class="line">        ctx.arc(<span class="number">112</span>, <span class="number">65</span>, <span class="number">65</span>, startPoint, startPoint - <span class="built_in">Math</span>.PI * <span class="number">2</span> * (data[i] / <span class="number">100</span>), <span class="literal">true</span>);  <span class="comment">// 开始画图，前两个参数是圆心坐标，第三个参数是半径大小，第四个参数是圆周起始位置，第五个参数是弧长，就是我们圆弧的范围，Math.PI*2就是整个圆了，Math.PI是半圆，第六个参数是个布尔值，就是确定是顺时针还是逆时针，这里false是顺时针。</span></div><div class="line">        ctx.fill();  <span class="comment">// 填充</span></div><div class="line">        ctx.stroke();  <span class="comment">// 边框</span></div><div class="line">        startPoint -= <span class="built_in">Math</span>.PI * <span class="number">2</span> * (data[i] / <span class="number">100</span>);  <span class="comment">// 画完一个善行以后，重新计算回到原点开始绘制下一扇，否则画出来的饼图拼起来就不是圆形了。</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">drawCircle();</div></pre></td></tr></table></figure><p>canvas是HTML5新增的画布标签，个人感觉这个标签在将来将大有用途，喜欢研究HTML5的童鞋可以深入研究这个标签。canvas上的高度可以自己随意设置，当然宽不能小于高，否则图形出来不是圆的。</p><p>效果：</p><p><img src="/blog/images/pie-canvas/canvas.jpg" alt=""></p><p>目前唯一的遗憾是还不能在图上加文字。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;不得不说，HTML5与CSS3的推出，将推翻老一代的网页制作者。特别在当今浏览器标准不断统一的情况下，新生的网页制作者几乎想不到在过去的时间里制作网页调兼容性是一件非常痛苦的事。&lt;/p&gt;
&lt;p&gt;过去我们要实现圆角只能切图，如今在CSS3里只需一条代码搞定。而CSS3的功能远
      
    
    </summary>
    
      <category term="html5" scheme="http://www.xieyangogo.cn/categories/html5/"/>
    
    
      <category term="HTML5" scheme="http://www.xieyangogo.cn/tags/HTML5/"/>
    
      <category term="canvas" scheme="http://www.xieyangogo.cn/tags/canvas/"/>
    
      <category term="饼图" scheme="http://www.xieyangogo.cn/tags/%E9%A5%BC%E5%9B%BE/"/>
    
  </entry>
  
</feed>
